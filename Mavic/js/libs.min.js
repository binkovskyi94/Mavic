!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(T,e){"use strict";function v(e){return null!=e&&e===e.window}var t=[],i=Object.getPrototypeOf,a=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,o=t.indexOf,n={},r=n.toString,m=n.hasOwnProperty,s=m.toString,c=s.call(Object),y={},w=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},k=T.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var i,o,r=(n=n||k).createElement("script");if(r.text=e,t)for(i in u)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[r.call(e)]||"object":typeof e}var d="3.5.1",C=function(e,t){return new C.fn.init(e,t)};function p(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!w(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}C.fn=C.prototype={jquery:d,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(n){return this.pushStack(C.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(C.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},C.extend=C.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||w(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(c&&i&&(C.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[t],r=o&&!Array.isArray(n)?[]:o||C.isPlainObject(n)?n:{},o=!1,s[t]=C.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},C.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==r.call(e))&&(!(t=i(e))||"function"==typeof(n=m.call(t,"constructor")&&t.constructor)&&s.call(n)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){b(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(p(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?C.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:o.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!=s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,s=[];if(p(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&s.push(o);return g(s)},guid:1,support:y}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=t[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var f=function(n){function d(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function o(){S()}var e,f,b,r,s,h,p,v,x,l,c,S,T,a,k,g,u,m,y,C="sizzle"+ +new Date,w=n.document,E=0,i=0,A=le(),$=le(),L=le(),O=le(),j=function(e,t){return e===t&&(c=!0),0},H={}.hasOwnProperty,t=[],D=t.pop,N=t.push,M=t.push,P=t.slice,q=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",z="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",W="\\["+z+"*("+R+")(?:"+z+"*([*^$|!~]?=)"+z+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+z+"*\\]",B=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(z+"+","g"),U=new RegExp("^"+z+"+|((?:^|[^\\\\])(?:\\\\.)*)"+z+"+$","g"),X=new RegExp("^"+z+"*,"+z+"*"),_=new RegExp("^"+z+"*([>+~]|"+z+")"+z+"*"),Y=new RegExp(z+"|>"),V=new RegExp(B),G=new RegExp("^"+R+"$"),K={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+z+"*(even|odd|(([+-]|)(\\d*)n|)"+z+"*(?:([+-]|)"+z+"*(\\d+)|))"+z+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+z+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+z+"*((?:-\\d)?\\d*)"+z+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,ie=new RegExp("\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\([^\\r\\n\\f])","g"),oe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{M.apply(t=P.call(w.childNodes),w.childNodes),t[w.childNodes.length].nodeType}catch(e){M={apply:t.length?function(e,t){N.apply(e,P.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(t,e,n,i){var o,r,s,a,l,c,u,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&(S(e),e=e||T,k)){if(11!==p&&(l=te.exec(t)))if(o=l[1]){if(9===p){if(!(s=e.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(d&&(s=d.getElementById(o))&&y(e,s)&&s.id===o)return n.push(s),n}else{if(l[2])return M.apply(n,e.getElementsByTagName(t)),n;if((o=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return M.apply(n,e.getElementsByClassName(o)),n}if(f.qsa&&!O[t+" "]&&(!g||!g.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(u=t,d=e,1===p&&(Y.test(t)||_.test(t))){for((d=ne.test(t)&&me(e.parentNode)||e)===e&&f.scope||((a=e.getAttribute("id"))?a=a.replace(oe,re):e.setAttribute("id",a=C)),r=(c=h(t)).length;r--;)c[r]=(a?"#"+a:":scope")+" "+we(c[r]);u=c.join(",")}try{return M.apply(n,d.querySelectorAll(u)),n}catch(e){O(t,!0)}finally{a===C&&e.removeAttribute("id")}}}return v(t.replace(U,"$1"),e,n,i)}function le(){var n=[];function i(e,t){return n.push(e+" ")>b.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function ce(e){return e[C]=!0,e}function ue(e){var t=T.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)b.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ve(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&se(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ge(s){return ce(function(r){return r=+r,ce(function(e,t){for(var n,i=s([],e.length,r),o=i.length;o--;)e[n=i[o]]&&(e[n]=!(t[n]=e[n]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=ae.support={},s=ae.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},S=ae.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:w;return i!=T&&9===i.nodeType&&i.documentElement&&(a=(T=i).documentElement,k=!s(T),w!=T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",o,!1):n.attachEvent&&n.attachEvent("onunload",o)),f.scope=ue(function(e){return a.appendChild(e).appendChild(T.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=ue(function(e){return e.appendChild(T.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=ee.test(T.getElementsByClassName),f.getById=ue(function(e){return a.appendChild(e).id=C,!T.getElementsByName||!T.getElementsByName(C).length}),f.getById?(b.filter.ID=function(e){var t=e.replace(ie,d);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&k){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(ie,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&k){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),b.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[o++];)1===n.nodeType&&i.push(n);return i},b.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&k)return t.getElementsByClassName(e)},u=[],g=[],(f.qsa=ee.test(T.querySelectorAll))&&(ue(function(e){var t;a.appendChild(e).innerHTML="<a id='"+C+"'></a><select id='"+C+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+z+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+z+"*(?:value|"+I+")"),e.querySelectorAll("[id~="+C+"-]").length||g.push("~="),(t=T.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+z+"*name"+z+"*="+z+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+C+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=T.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+z+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(f.matchesSelector=ee.test(m=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ue(function(e){f.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),u.push("!=",B)}),g=g.length&&new RegExp(g.join("|")),u=u.length&&new RegExp(u.join("|")),t=ee.test(a.compareDocumentPosition),y=t||ee.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==T||e.ownerDocument==w&&y(w,e)?-1:t==T||t.ownerDocument==w&&y(w,t)?1:l?q(l,e)-q(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e==T?-1:t==T?1:o?-1:r?1:l?q(l,e)-q(l,t):0;if(o===r)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?pe(s[i],a[i]):s[i]==w?-1:a[i]==w?1:0}),T},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(S(e),f.matchesSelector&&k&&!O[t+" "]&&(!u||!u.test(t))&&(!g||!g.test(t)))try{var n=m.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){O(t,!0)}return 0<ae(t,T,null,[e]).length},ae.contains=function(e,t){return(e.ownerDocument||e)!=T&&S(e),y(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=T&&S(e);var n=b.attrHandle[t.toLowerCase()],i=n&&H.call(b.attrHandle,t.toLowerCase())?n(e,t,!k):void 0;return void 0!==i?i:f.attributes||!k?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ae.escape=function(e){return(e+"").replace(oe,re)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,n=[],i=0,o=0;if(c=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(j),c){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return l=null,e},r=ae.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(b=ae.selectors={cacheLength:50,createPseudo:ce,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|"+z+")"+e+"("+z+"|$)"))&&A(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,o){return function(e){var t=ae.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===o:"!="===i?t!==o:"^="===i?o&&0===t.indexOf(o):"*="===i?o&&-1<t.indexOf(o):"$="===i?o&&t.slice(-o.length)===o:"~="===i?-1<(" "+t.replace(F," ")+" ").indexOf(o):"|="===i&&(t===o||t.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,e,t,v,g){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),w="of-type"===e;return 1===v&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var i,o,r,s,a,l,c=m!=y?"nextSibling":"previousSibling",u=e.parentNode,d=w&&e.nodeName.toLowerCase(),p=!n&&!w,f=!1;if(u){if(m){for(;c;){for(s=e;s=s[c];)if(w?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&p){for(f=(a=(i=(o=(r=(s=u)[C]||(s[C]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&i[1])&&i[2],s=a&&u.childNodes[a];s=++a&&s&&s[c]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===e){o[h]=[E,a,f];break}}else if(p&&(f=a=(i=(o=(r=(s=e)[C]||(s[C]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===E&&i[1]),!1===f)for(;(s=++a&&s&&s[c]||(f=a=0)||l.pop())&&((w?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++f||(p&&((o=(r=s[C]||(s[C]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[E,f]),s!==e)););return(f-=g)===v||f%v==0&&0<=f/v}}},PSEUDO:function(e,r){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return s[C]?s(r):1<s.length?(t=[e,e,"",r],b.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var n,i=s(e,r),o=i.length;o--;)e[n=q(e,i[o])]=!(t[n]=i[o])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ce(function(e){var i=[],o=[],a=p(e.replace(U,"$1"));return a[C]?ce(function(e,t,n,i){for(var o,r=a(e,null,i,[]),s=e.length;s--;)(o=r[s])&&(e[s]=!(t[s]=o))}):function(e,t,n){return i[0]=e,a(i,null,n,o),i[0]=null,!o.pop()}}),has:ce(function(t){return function(e){return 0<ae(t,e).length}}),contains:ce(function(t){return t=t.replace(ie,d),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:ce(function(n){return G.test(n||"")||ae.error("unsupported lang: "+n),n=n.replace(ie,d).toLowerCase(),function(e){var t;do{if(t=k?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ve(!1),disabled:ve(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,n){return[n<0?n+t:n]}),even:ge(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ge(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ge(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:ge(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=fe(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function ye(){}function we(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function be(a,e,t){var l=e.dir,c=e.next,u=c||l,d=t&&"parentNode"===u,p=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return a(e,t,n);return!1}:function(e,t,n){var i,o,r,s=[E,p];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&a(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(o=(r=e[C]||(e[C]={}))[e.uniqueID]||(r[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((i=o[u])&&i[0]===E&&i[1]===p)return s[2]=i[2];if((o[u]=s)[2]=a(e,t,n))return!0}return!1}}function xe(o){return 1<o.length?function(e,t,n){for(var i=o.length;i--;)if(!o[i](e,t,n))return!1;return!0}:o[0]}function Se(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function Te(f,h,v,g,m,e){return g&&!g[C]&&(g=Te(g)),m&&!m[C]&&(m=Te(m,e)),ce(function(e,t,n,i){var o,r,s,a=[],l=[],c=t.length,u=e||function(e,t,n){for(var i=0,o=t.length;i<o;i++)ae(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!f||!e&&h?u:Se(u,a,f,n,i),p=v?m||(e?f:c||g)?[]:t:d;if(v&&v(d,p,n,i),g)for(o=Se(p,l),g(o,[],n,i),r=o.length;r--;)(s=o[r])&&(p[l[r]]=!(d[l[r]]=s));if(e){if(m||f){if(m){for(o=[],r=p.length;r--;)(s=p[r])&&o.push(d[r]=s);m(null,p=[],o,i)}for(r=p.length;r--;)(s=p[r])&&-1<(o=m?q(e,s):a[r])&&(e[o]=!(t[o]=s))}}else p=Se(p===t?p.splice(c,p.length):p),m?m(null,t,p,i):M.apply(t,p)})}function ke(e){for(var o,t,n,i=e.length,r=b.relative[e[0].type],s=r||b.relative[" "],a=r?1:0,l=be(function(e){return e===o},s,!0),c=be(function(e){return-1<q(o,e)},s,!0),u=[function(e,t,n){var i=!r&&(n||t!==x)||((o=t).nodeType?l:c)(e,t,n);return o=null,i}];a<i;a++)if(t=b.relative[e[a].type])u=[be(xe(u),t)];else{if((t=b.filter[e[a].type].apply(null,e[a].matches))[C]){for(n=++a;n<i&&!b.relative[e[n].type];n++);return Te(1<a&&xe(u),1<a&&we(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(U,"$1"),t,a<n&&ke(e.slice(a,n)),n<i&&ke(e=e.slice(n)),n<i&&we(e))}u.push(t)}return xe(u)}function Ce(g,m){function e(e,t,n,i,o){var r,s,a,l=0,c="0",u=e&&[],d=[],p=x,f=e||w&&b.find.TAG("*",o),h=E+=null==p?1:Math.random()||.1,v=f.length;for(o&&(x=t==T||t||o);c!==v&&null!=(r=f[c]);c++){if(w&&r){for(s=0,t||r.ownerDocument==T||(S(r),n=!k);a=g[s++];)if(a(r,t||T,n)){i.push(r);break}o&&(E=h)}y&&((r=!a&&r)&&l--,e&&u.push(r))}if(l+=c,y&&c!==l){for(s=0;a=m[s++];)a(u,d,t,n);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=D.call(i));d=Se(d)}M.apply(i,d),o&&!e&&0<d.length&&1<l+m.length&&ae.uniqueSort(i)}return o&&(E=h,x=p),u}var y=0<m.length,w=0<g.length;return y?ce(e):e}return ye.prototype=b.filters=b.pseudos,b.setFilters=new ye,h=ae.tokenize=function(e,t){var n,i,o,r,s,a,l,c=$[e+" "];if(c)return t?0:c.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(r in n&&!(i=X.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(o=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(U," ")}),s=s.slice(n.length)),b.filter)!(i=K[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?ae.error(e):$(e,a).slice(0)},p=ae.compile=function(e,t){var n,i=[],o=[],r=L[e+" "];if(!r){for(n=(t=t||h(e)).length;n--;)(r=ke(t[n]))[C]?i.push(r):o.push(r);(r=L(e,Ce(o,i))).selector=e}return r},v=ae.select=function(e,t,n,i){var o,r,s,a,l,c="function"==typeof e&&e,u=!i&&h(e=c.selector||e);if(n=n||[],1===u.length){if(2<(r=u[0]=u[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===t.nodeType&&k&&b.relative[r[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(ie,d),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=K.needsContext.test(e)?0:r.length;o--&&(s=r[o],!b.relative[a=s.type]);)if((l=b.find[a])&&(i=l(s.matches[0].replace(ie,d),ne.test(r[0].type)&&me(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&we(r)))return M.apply(n,i),n;break}}return(c||p(e,u))(i,t,!k,n,!t||ne.test(e)&&me(t.parentNode)||t),n},f.sortStable=C.split("").sort(j).join("")===C,f.detectDuplicates=!!c,S(),f.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(T.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||de(I,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),ae}(T);C.find=f,C.expr=f.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=f.uniqueSort,C.text=f.getText,C.isXMLDoc=f.isXML,C.contains=f.contains,C.escapeSelector=f.escape;function h(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&C(e).is(n))break;i.push(e)}return i}function S(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var E=C.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var $=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,n,i){return w(n)?C.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?C.grep(e,function(e){return e===n!==i}):"string"!=typeof n?C.grep(e,function(e){return-1<o.call(n,e)!==i}):C.filter(n,e,i)}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<i;t++)if(C.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)C.find(e,o[t],n);return 1<i?C.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&E.test(e)?C(e):e||[],!1).length}});var O,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||O,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):w(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:k,!0)),$.test(i[1])&&C.isPlainObject(t))for(i in t)w(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=k.getElementById(i[2]))&&(this[0]=o,this.length=1),this}).prototype=C.fn,O=C(k);var H=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function N(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,o=this.length,r=[],s="string"!=typeof e&&C(e);if(!E.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&C.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?C.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?o.call(C(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,"parentNode")},parentsUntil:function(e,t,n){return h(e,"parentNode",n)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return h(e,"nextSibling")},prevAll:function(e){return h(e,"previousSibling")},nextUntil:function(e,t,n){return h(e,"nextSibling",n)},prevUntil:function(e,t,n){return h(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},function(i,o){C.fn[i]=function(e,t){var n=C.map(this,o,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=C.filter(t,n)),1<this.length&&(D[i]||C.uniqueSort(n),H.test(i)&&n.reverse()),this.pushStack(n)}});var M=/[^\x20\t\r\n\f]+/g;function P(e){return e}function q(e){throw e}function I(e,t,n,i){var o;try{e&&w(o=e.promise)?o.call(e).done(t).fail(n):e&&w(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},C.each(e.match(M)||[],function(e,t){n[t]=!0}),n):C.extend({},i);function o(){for(a=a||i.once,s=r=!0;c.length;u=-1)for(t=c.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&i.stopOnFalse&&(u=l.length,t=!1);i.memory||(t=!1),r=!1,a&&(l=t?[]:"")}var r,t,s,a,l=[],c=[],u=-1,d={add:function(){return l&&(t&&!r&&(u=l.length-1,c.push(t)),function n(e){C.each(e,function(e,t){w(t)?i.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==x(t)&&n(t)})}(arguments),t&&!r&&o()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;-1<(n=C.inArray(t,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<C.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=c=[],t||r||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),r||o()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},C.extend({Deferred:function(e){var r=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],o="pending",s={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var o=arguments;return C.Deferred(function(i){C.each(r,function(e,t){var n=w(o[t[4]])&&o[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&w(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),o=null}).promise()},then:function(t,n,i){var l=0;function c(o,r,s,a){return function(){function e(){var e,t;if(!(o<l)){if((e=s.apply(n,i))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,w(t)?a?t.call(e,c(l,r,P,a),c(l,r,q,a)):(l++,t.call(e,c(l,r,P,a),c(l,r,q,a),c(l,r,P,r.notifyWith))):(s!==P&&(n=void 0,i=[e]),(a||r.resolveWith)(n,i))}}var n=this,i=arguments,t=a?e:function(){try{e()}catch(e){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(e,t.stackTrace),l<=o+1&&(s!==q&&(n=void 0,i=[e]),r.rejectWith(n,i))}};o?t():(C.Deferred.getStackHook&&(t.stackTrace=C.Deferred.getStackHook()),T.setTimeout(t))}}return C.Deferred(function(e){r[0][3].add(c(0,e,w(i)?i:P,e.notifyWith)),r[1][3].add(c(0,e,w(t)?t:P)),r[2][3].add(c(0,e,w(n)?n:q))}).promise()},promise:function(e){return null!=e?C.extend(e,s):s}},a={};return C.each(r,function(e,t){var n=t[2],i=t[5];s[t[1]]=n.add,i&&n.add(function(){o=i},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){o[t]=this,r[t]=1<arguments.length?a.call(arguments):e,--n||s.resolveWith(o,r)}}var n=arguments.length,i=n,o=Array(i),r=a.call(arguments),s=C.Deferred();if(n<=1&&(I(e,s.done(t(i)).resolve,s.reject,!n),"pending"===s.state()||w(r[i]&&r[i].then)))return s.then();for(;i--;)I(r[i],t(i),s.reject);return s.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){T.console&&T.console.warn&&e&&z.test(e.name)&&T.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){T.setTimeout(function(){throw e})};var R=C.Deferred();function W(){k.removeEventListener("DOMContentLoaded",W),T.removeEventListener("load",W),C.ready()}C.fn.ready=function(e){return R.then(e).catch(function(e){C.readyException(e)}),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0)!==e&&0<--C.readyWait||R.resolveWith(k,[C])}}),C.ready.then=R.then,"complete"===k.readyState||"loading"!==k.readyState&&!k.documentElement.doScroll?T.setTimeout(C.ready):(k.addEventListener("DOMContentLoaded",W),T.addEventListener("load",W));var B=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===x(n))for(a in o=!0,n)B(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,w(i)||(s=!0),c&&(t=s?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(C(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},F=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function _(e){return e.replace(F,"ms-").replace(U,X)}function Y(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function V(){this.expando=C.expando+V.uid++}V.uid=1,V.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[_(t)]=n;else for(i in t)o[_(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][_(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(_):(t=_(t))in i?[t]:t.match(M)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!C.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var G=new V,K=new V,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function Z(e,t,n){var i,o;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:Q.test(o)?JSON.parse(o):o)}catch(e){}K.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return K.hasData(e)||G.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return G.access(e,t,n)},_removeData:function(e,t){G.remove(e,t)}}),C.fn.extend({data:function(n,e){var t,i,o,r=this[0],s=r&&r.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){K.set(this,n)}):B(this,function(e){var t;if(r&&void 0===e)return void 0!==(t=K.get(r,n))||void 0!==(t=Z(r,n))?t:void 0;this.each(function(){K.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=K.get(r),1===r.nodeType&&!G.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(i=s[t].name).indexOf("data-")&&(i=_(i.slice(5)),Z(r,i,o[i]));G.set(r,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),C.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=G.get(e,t),n&&(!i||Array.isArray(n)?i=G.access(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,o=n.shift(),r=C._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,function(){C.dequeue(e,t)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return G.get(e,n)||G.access(e,n,{empty:C.Callbacks("once memory").add(function(){G.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?C.queue(this[0],t):void 0===n?this:this.each(function(){var e=C.queue(this,t,n);C._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&C.dequeue(this,t)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--o||r.resolveWith(s,[s])}var i,o=1,r=C.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(i=G.get(s[a],e+"queueHooks"))&&i.empty&&(o++,i.empty.add(n));return n(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ie=k.documentElement,oe=function(e){return C.contains(e.ownerDocument,e)},re={composed:!0};ie.getRootNode&&(oe=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===C.css(e,"display")};function ae(e,t,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return C.css(e,t,"")},l=a(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),u=e.nodeType&&(C.cssNumber[t]||"px"!==c&&+l)&&te.exec(C.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)C.style(e,t,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;u*=2,C.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var le={};function ce(e,t){for(var n,i,o,r,s,a,l,c=[],u=0,d=e.length;u<d;u++)(i=e[u]).style&&(n=i.style.display,t?("none"===n&&(c[u]=G.get(i,"display")||null,c[u]||(i.style.display="")),""===i.style.display&&se(i)&&(c[u]=(l=s=r=void 0,s=(o=i).ownerDocument,a=o.nodeName,(l=le[a])||(r=s.body.appendChild(s.createElement(a)),l=C.css(r,"display"),r.parentNode.removeChild(r),"none"===l&&(l="block"),le[a]=l)))):"none"!==n&&(c[u]="none",G.set(i,"display",n)));for(u=0;u<d;u++)null!=c[u]&&(e[u].style.display=c[u]);return e}C.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?C(this).show():C(this).hide()})}});var ue,de,pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;ue=k.createDocumentFragment().appendChild(k.createElement("div")),(de=k.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),ue.appendChild(de),y.checkClone=ue.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ue.cloneNode(!0).lastChild.defaultValue,ue.innerHTML="<option></option>",y.option=!!ue.lastChild;var ve={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?C.merge([e],n):n}function me(e,t){for(var n=0,i=e.length;n<i;n++)G.set(e[n],"globalEval",!t||G.get(t[n],"globalEval"))}ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td,y.option||(ve.optgroup=ve.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function we(e,t,n,i,o){for(var r,s,a,l,c,u,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===x(r))C.merge(p,r.nodeType?[r]:r);else if(ye.test(r)){for(s=s||d.appendChild(t.createElement("div")),a=(fe.exec(r)||["",""])[1].toLowerCase(),l=ve[a]||ve._default,s.innerHTML=l[1]+C.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;C.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",f=0;r=p[f++];)if(i&&-1<C.inArray(r,i))o&&o.push(r);else if(c=oe(r),s=ge(d.appendChild(r),"script"),c&&me(s),n)for(u=0;r=s[u++];)he.test(r.type||"")&&n.push(r);return d}var be=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function ke(){return!1}function Ce(e,t){return e===function(){try{return k.activeElement}catch(e){}}()==("focus"===t)}function Ee(e,t,n,i,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Ee(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=ke;else if(!o)return e;return 1===r&&(s=o,(o=function(e){return C().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=C.guid++)),e.each(function(){C.event.add(this,t,o,i,n)})}function Ae(e,o,r){r?(G.set(e,o,!1),C.event.add(e,o,{namespace:!1,handler:function(e){var t,n,i=G.get(this,o);if(1&e.isTrigger&&this[o]){if(i.length)(C.event.special[o]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),G.set(this,o,i),t=r(this,o),this[o](),i!==(n=G.get(this,o))||t?G.set(this,o,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else i.length&&(G.set(this,o,{value:C.event.trigger(C.extend(i[0],C.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===G.get(e,o)&&C.event.add(e,o,Te)}C.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,c,u,d,p,f,h,v,g=G.get(t);if(Y(t))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&C.find.matchesSelector(ie,o),n.guid||(n.guid=C.guid++),(l=g.events)||(l=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(M)||[""]).length;c--;)f=v=(a=Se.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=C.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=C.event.special[f]||{},u=C.extend({type:f,origType:v,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&C.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,i,h,s)||t.addEventListener&&t.addEventListener(f,s)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),C.event.global[f]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,u,d,p,f,h,v,g=G.hasData(e)&&G.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(M)||[""]).length;c--;)if(f=v=(a=Se.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=C.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)u=p[r],!o&&v!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||C.removeEvent(e,f,g.handle),delete l[f])}else for(f in l)C.event.remove(e,f+t[c],n,i,!0);C.isEmptyObject(l)&&G.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,s,a=new Array(arguments.length),l=C.event.fix(e),c=(G.get(this,"events")||Object.create(null))[l.type]||[],u=C.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=C.event.handlers.call(this,l,c),t=0;(o=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((C.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,o,r,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=t[n]).selector+" "]&&(s[o]=i.needsContext?-1<C(o,this).index(c):C.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(C.Event.prototype,t,{enumerable:!0,configurable:!0,get:w(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click",Te),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&G.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},function(e,t){C.event.special[e]={setup:function(){return Ae(this,e,Ce),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){C.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||C.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=o),t}}}),C.fn.extend({on:function(e,t,n,i){return Ee(this,e,t,n,i)},one:function(e,t,n,i){return Ee(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){C.event.remove(this,e,n,t)});for(o in e)this.off(o,t,e[o]);return this}});var $e=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ne(e,t){var n,i,o,r,s,a;if(1===t.nodeType){if(G.hasData(e)&&(a=G.get(e).events))for(o in G.remove(t,"handle events"),a)for(n=0,i=a[o].length;n<i;n++)C.event.add(t,o,a[o][n]);K.hasData(e)&&(r=K.access(e),s=C.extend({},r),K.set(t,s))}}function Me(n,i,o,r){i=g(i);var e,t,s,a,l,c,u=0,d=n.length,p=d-1,f=i[0],h=w(f);if(h||1<d&&"string"==typeof f&&!y.checkClone&&Le.test(f))return n.each(function(e){var t=n.eq(e);h&&(i[0]=f.call(this,e,t.html())),Me(t,i,o,r)});if(d&&(t=(e=we(i,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(a=(s=C.map(ge(e,"script"),He)).length;u<d;u++)l=e,u!==p&&(l=C.clone(l,!0,!0),a&&C.merge(s,ge(l,"script"))),o.call(n[u],l,u);if(a)for(c=s[s.length-1].ownerDocument,C.map(s,De),u=0;u<a;u++)l=s[u],he.test(l.type||"")&&!G.access(l,"globalEval")&&C.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):b(l.textContent.replace(Oe,""),l,c))}return n}function Pe(e,t,n){for(var i,o=t?C.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||C.cleanData(ge(i)),i.parentNode&&(n&&oe(i)&&me(ge(i,"script")),i.parentNode.removeChild(i));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,s,a,l,c,u=e.cloneNode(!0),d=oe(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=ge(u),i=0,o=(r=ge(e)).length;i<o;i++)a=r[i],l=s[i],"input"===(c=l.nodeName.toLowerCase())&&pe.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(r=r||ge(e),s=s||ge(u),i=0,o=r.length;i<o;i++)Ne(r[i],s[i]);else Ne(e,u);return 0<(s=ge(u,"script")).length&&me(s,!d&&ge(e,"script")),u},cleanData:function(e){for(var t,n,i,o=C.event.special,r=0;void 0!==(n=e[r]);r++)if(Y(n)){if(t=n[G.expando]){if(t.events)for(i in t.events)o[i]?C.event.remove(n,i):C.removeEvent(n,i,t.handle);n[G.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Pe(this,e,!0)},remove:function(e){return Pe(this,e)},text:function(e){return B(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Me(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)})},prepend:function(){return Me(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Me(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Me(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!$e.test(e)&&!ve[(fe.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Me(this,arguments,function(e){var t=this.parentNode;C.inArray(this,n)<0&&(C.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){C.fn[e]=function(e){for(var t,n=[],i=C(e),o=i.length-1,r=0;r<=o;r++)t=r===o?this:this.clone(!0),C(i[r])[s](t),l.apply(n,t.get());return this.pushStack(n)}});function qe(e,t,n){var i,o,r={};for(o in t)r[o]=e.style[o],e.style[o]=t[o];for(o in i=n.call(e),t)e.style[o]=r[o];return i}var Ie,ze,Re,We,Be,Fe,Ue,Xe,_e=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ye=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=T),t.getComputedStyle(e)},Ve=new RegExp(ne.join("|"),"i");function Ge(){if(Xe){Ue.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(Ue).appendChild(Xe);var e=T.getComputedStyle(Xe);Ie="1%"!==e.top,Fe=12===Ke(e.marginLeft),Xe.style.right="60%",We=36===Ke(e.right),ze=36===Ke(e.width),Xe.style.position="absolute",Re=12===Ke(Xe.offsetWidth/3),ie.removeChild(Ue),Xe=null}}function Ke(e){return Math.round(parseFloat(e))}function Qe(e,t,n){var i,o,r,s,a=e.style;return(n=n||Ye(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||oe(e)||(s=C.style(e,t)),!y.pixelBoxStyles()&&_e.test(s)&&Ve.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ue=k.createElement("div"),(Xe=k.createElement("div")).style&&(Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Xe.style.backgroundClip,C.extend(y,{boxSizingReliable:function(){return Ge(),ze},pixelBoxStyles:function(){return Ge(),We},pixelPosition:function(){return Ge(),Ie},reliableMarginLeft:function(){return Ge(),Fe},scrollboxSize:function(){return Ge(),Re},reliableTrDimensions:function(){var e,t,n,i;return null==Be&&(e=k.createElement("table"),t=k.createElement("tr"),n=k.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",ie.appendChild(e).appendChild(t).appendChild(n),i=T.getComputedStyle(t),Be=3<parseInt(i.height),ie.removeChild(e)),Be}}));var Ze=["Webkit","Moz","ms"],et=k.createElement("div").style,tt={};function nt(e){var t=C.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ze.length;n--;)if((e=Ze[n]+t)in et)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,ot=/^--/,rt={position:"absolute",visibility:"hidden",display:"block"},st={letterSpacing:"0",fontWeight:"400"};function at(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function lt(e,t,n,i,o,r){var s="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=C.css(e,n+ne[s],!0,o)),i?("content"===n&&(l-=C.css(e,"padding"+ne[s],!0,o)),"margin"!==n&&(l-=C.css(e,"border"+ne[s]+"Width",!0,o))):(l+=C.css(e,"padding"+ne[s],!0,o),"padding"!==n?l+=C.css(e,"border"+ne[s]+"Width",!0,o):a+=C.css(e,"border"+ne[s]+"Width",!0,o));return!i&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l}function ct(e,t,n){var i=Ye(e),o=(!y.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,i),r=o,s=Qe(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(_e.test(s)){if(!n)return s;s="auto"}return(!y.boxSizingReliable()&&o||!y.reliableTrDimensions()&&A(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===C.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===C.css(e,"boxSizing",!1,i),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+lt(e,t,n||(o?"border":"content"),r,i,s)+"px"}function ut(e,t,n,i,o){return new ut.prototype.init(e,t,n,i,o)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=_(t),l=ot.test(t),c=e.style;if(l||(t=nt(a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:c[t];"string"===(r=typeof n)&&(o=te.exec(n))&&o[1]&&(n=ae(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(C.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r,s,a=_(t);return ot.test(t)||(t=nt(a)),(s=C.cssHooks[t]||C.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Qe(e,t,i)),"normal"===o&&t in st&&(o=st[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),C.each(["height","width"],function(e,l){C.cssHooks[l]={get:function(e,t,n){if(t)return!it.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,n):qe(e,rt,function(){return ct(e,l,n)})},set:function(e,t,n){var i,o=Ye(e),r=!y.scrollboxSize()&&"absolute"===o.position,s=(r||n)&&"border-box"===C.css(e,"boxSizing",!1,o),a=n?lt(e,l,n,s,o):0;return s&&r&&(a-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(o[l])-lt(e,l,"border",!1,o)-.5)),a&&(i=te.exec(t))&&"px"!==(i[3]||"px")&&(e.style[l]=t,t=C.css(e,l)),at(0,t,a)}}}),C.cssHooks.marginLeft=Je(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(o,r){C.cssHooks[o+r]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[o+ne[t]+r]=i[t]||i[t-2]||i[0];return n}},"margin"!==o&&(C.cssHooks[o+r].set=at)}),C.fn.extend({css:function(e,t){return B(this,function(e,t,n){var i,o,r={},s=0;if(Array.isArray(t)){for(i=Ye(e),o=t.length;s<o;s++)r[t[s]]=C.css(e,t[s],!1,i);return r}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,1<arguments.length)}}),(C.Tween=ut).prototype={constructor:ut,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(C.cssNumber[n]?"":"px")},cur:function(){var e=ut.propHooks[this.prop];return e&&e.get?e.get(this):ut.propHooks._default.get(this)},run:function(e){var t,n=ut.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ut.propHooks._default.set(this),this}},ut.prototype.init.prototype=ut.prototype,ut.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},ut.propHooks.scrollTop=ut.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=ut.prototype.init,C.fx.step={};var dt,pt,ft,ht,vt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function mt(){pt&&(!1===k.hidden&&T.requestAnimationFrame?T.requestAnimationFrame(mt):T.setTimeout(mt,C.fx.interval),C.fx.tick())}function yt(){return T.setTimeout(function(){dt=void 0}),dt=Date.now()}function wt(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=ne[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function bt(e,t,n){for(var i,o=(xt.tweeners[t]||[]).concat(xt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function xt(r,e,t){var n,s,i=0,o=xt.prefilters.length,a=C.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=dt||yt(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),i=0,o=c.tweens.length;i<o;i++)c.tweens[i].run(n);return a.notifyWith(r,[c,n,t]),n<1&&o?t:(o||a.notifyWith(r,[c,1,0]),a.resolveWith(r,[c]),!1)},c=a.promise({elem:r,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=C.Tween(r,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)c.tweens[t].run(1);return e?(a.notifyWith(r,[c,1,0]),a.resolveWith(r,[c,e])):a.rejectWith(r,[c,e]),this}}),u=c.props;for(!function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=_(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=C.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(u,c.opts.specialEasing);i<o;i++)if(n=xt.prefilters[i].call(c,r,u,c.opts))return w(n.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return C.map(u,bt,c),w(c.opts.start)&&c.opts.start.call(r,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(l,{elem:r,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(xt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ae(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,o=(e=w(e)?(t=e,["*"]):e.match(M)).length;i<o;i++)n=e[i],xt.tweeners[n]=xt.tweeners[n]||[],xt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,s,a,l,c,u,d="width"in t||"height"in t,p=this,f={},h=e.style,v=e.nodeType&&se(e),g=G.get(e,"fxshow");for(i in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()})})),t)if(o=t[i],vt.test(o)){if(delete t[i],r=r||"toggle"===o,o===(v?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;v=!0}f[i]=g&&g[i]||C.style(e,i)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(f))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=G.get(e,"display")),"none"===(u=C.css(e,"display"))&&(c?u=c:(ce([e],!0),c=e.style.display||c,u=C.css(e,"display"),ce([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===C.css(e,"float")&&(l||(p.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(v=g.hidden):g=G.access(e,"fxshow",{display:c}),r&&(g.hidden=!v),v&&ce([e],!0),p.done(function(){for(i in v||ce([e]),G.remove(e,"fxshow"),f)C.style(e,i,f[i])})),l=bt(v?g[i]:0,i,p),i in g||(g[i]=l.start,v&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?xt.prefilters.unshift(e):xt.prefilters.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||w(e)&&e,duration:e,easing:n&&t||t&&!w(t)&&t};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){w(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function o(){var e=xt(this,C.extend({},t),s);(r||G.get(this,"finish"))&&e.stop(!0)}var r=C.isEmptyObject(t),s=C.speed(e,n,i);return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(o,e,r){function s(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof o&&(r=e,e=o,o=void 0),e&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",n=C.timers,i=G.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&gt.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=o&&n[t].queue!==o||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||C.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=G.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],o=C.timers,r=n?n.length:0;for(t.finish=!0,C.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===s&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),C.each(["toggle","show","hide"],function(e,i){var o=C.fn[i];C.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(wt(i,!0),e,t,n)}}),C.each({slideDown:wt("show"),slideUp:wt("hide"),slideToggle:wt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){C.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),dt=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){pt||(pt=!0,mt())},C.fx.stop=function(){pt=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(i,e){return i=C.fx&&C.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=T.setTimeout(e,i);t.stop=function(){T.clearTimeout(n)}})},ft=k.createElement("input"),ht=k.createElement("select").appendChild(k.createElement("option")),ft.type="checkbox",y.checkOn=""!==ft.value,y.optSelected=ht.selected,(ft=k.createElement("input")).value="t",ft.type="radio",y.radioValue="t"===ft.value;var St,Tt=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return B(this,C.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?C.prop(e,t,n):(1===r&&C.isXMLDoc(e)||(o=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?St:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(o&&"get"in o&&null!==(i=o.get(e,t)))&&null==(i=C.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(M);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),St={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var s=Tt[t]||C.find.attr;Tt[t]=function(e,t,n){var i,o,r=t.toLowerCase();return n||(o=Tt[r],Tt[r]=i,i=null!=s(e,t,n)?r:null,Tt[r]=o),i}});var kt=/^(?:input|select|textarea|button)$/i,Ct=/^(?:a|area)$/i;function Et(e){return(e.match(M)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function $t(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(M)||[]}C.fn.extend({prop:function(e,t){return B(this,C.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&C.isXMLDoc(e)||(t=C.propFix[t]||t,o=C.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):kt.test(e.nodeName)||Ct.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(w(t))return this.each(function(e){C(this).addClass(t.call(this,e,At(this)))});if((e=$t(t)).length)for(;n=this[l++];)if(o=At(n),i=1===n.nodeType&&" "+Et(o)+" "){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=Et(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(w(t))return this.each(function(e){C(this).removeClass(t.call(this,e,At(this)))});if(!arguments.length)return this.attr("class","");if((e=$t(t)).length)for(;n=this[l++];)if(o=At(n),i=1===n.nodeType&&" "+Et(o)+" "){for(s=0;r=e[s++];)for(;-1<i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");o!==(a=Et(i))&&n.setAttribute("class",a)}return this},toggleClass:function(o,t){var r=typeof o,s="string"==r||Array.isArray(o);return"boolean"==typeof t&&s?t?this.addClass(o):this.removeClass(o):w(o)?this.each(function(e){C(this).toggleClass(o.call(this,e,At(this),t),t)}):this.each(function(){var e,t,n,i;if(s)for(t=0,n=C(this),i=$t(o);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==o&&"boolean"!=r||((e=At(this))&&G.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==o&&G.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+Et(At(n))+" ").indexOf(t))return!0;return!1}});var Lt=/\r/g;C.fn.extend({val:function(n){var i,e,o,t=this[0];return arguments.length?(o=w(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=o?n.call(this,e,C(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=C.map(t,function(e){return null==e?"":e+""})),(i=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=C.valHooks[t.type]||C.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Lt,""):null==e?"":e:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:Et(C.text(e))}},select:{get:function(e){var t,n,i,o=e.options,r=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=C(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,o=e.options,r=C.makeArray(t),s=o.length;s--;)((i=o[s]).selected=-1<C.inArray(C.valHooks.option.get(i),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<C.inArray(C(e).val(),t)}},y.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in T;function Ot(e){e.stopPropagation()}var jt=/^(?:focusinfocus|focusoutblur)$/;C.extend(C.event,{trigger:function(e,t,n,i){var o,r,s,a,l,c,u,d,p=[n||k],f=m.call(e,"type")?e.type:e,h=m.call(e,"namespace")?e.namespace.split("."):[];if(r=d=s=n=n||k,3!==n.nodeType&&8!==n.nodeType&&!jt.test(f+C.event.triggered)&&(-1<f.indexOf(".")&&(f=(h=f.split(".")).shift(),h.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[C.expando]?e:new C.Event(f,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),u=C.event.special[f]||{},i||!u.trigger||!1!==u.trigger.apply(n,t))){if(!i&&!u.noBubble&&!v(n)){for(a=u.delegateType||f,jt.test(a+f)||(r=r.parentNode);r;r=r.parentNode)p.push(r),s=r;s===(n.ownerDocument||k)&&p.push(s.defaultView||s.parentWindow||T)}for(o=0;(r=p[o++])&&!e.isPropagationStopped();)d=r,e.type=1<o?a:u.bindType||f,(c=(G.get(r,"events")||Object.create(null))[e.type]&&G.get(r,"handle"))&&c.apply(r,t),(c=l&&r[l])&&c.apply&&Y(r)&&(e.result=c.apply(r,t),!1===e.result&&e.preventDefault());return e.type=f,i||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(p.pop(),t)||!Y(n)||l&&w(n[f])&&!v(n)&&((s=n[l])&&(n[l]=null),C.event.triggered=f,e.isPropagationStopped()&&d.addEventListener(f,Ot),n[f](),e.isPropagationStopped()&&d.removeEventListener(f,Ot),C.event.triggered=void 0,s&&(n[l]=s)),e.result}},simulate:function(e,t,n){var i=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(i,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),y.focusin||C.each({focus:"focusin",blur:"focusout"},function(n,i){function o(e){C.event.simulate(i,e.target,C.event.fix(e))}C.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=G.access(e,i);t||e.addEventListener(n,o,!0),G.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=G.access(e,i)-1;t?G.access(e,i,t):(e.removeEventListener(n,o,!0),G.remove(e,i))}}});var Ht=T.location,Dt={guid:Date.now()},Nt=/\?/;C.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new T.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+e),t};var Mt=/\[\]$/,Pt=/\r?\n/g,qt=/^(?:submit|button|image|reset|file)$/i,It=/^(?:input|select|textarea|keygen)/i;function zt(n,e,i,o){var t;if(Array.isArray(e))C.each(e,function(e,t){i||Mt.test(n)?o(n,t):zt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,i,o)});else if(i||"object"!==x(e))o(n,e);else for(t in e)zt(n+"["+t+"]",e[t],i,o)}C.param=function(e,t){function n(e,t){var n=w(t)?t():t;o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var i,o=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){n(this.name,this.value)});else for(i in e)zt(i,e[i],t,n);return o.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&It.test(this.nodeName)&&!qt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}}):{name:t.name,value:n.replace(Pt,"\r\n")}}).get()}});var Rt=/%20/g,Wt=/#.*$/,Bt=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ut=/^(?:GET|HEAD)$/,Xt=/^\/\//,_t={},Yt={},Vt="*/".concat("*"),Gt=k.createElement("a");function Kt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,o=e.toLowerCase().match(M)||[];if(w(t))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function Qt(t,o,r,s){var a={},l=t===Yt;function c(e){var i;return a[e]=!0,C.each(t[e]||[],function(e,t){var n=t(o,r,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(o.dataTypes.unshift(n),c(n),!1)}),i}return c(o.dataTypes[0])||!a["*"]&&c("*")}function Jt(e,t){var n,i,o=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i=i||{})[n]=t[n]);return i&&C.extend(!0,e,i),e}Gt.href=Ht.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ht.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ht.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,C.ajaxSettings),t):Jt(C.ajaxSettings,e)},ajaxPrefilter:Kt(_t),ajaxTransport:Kt(Yt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,d,p,n,f,i,h,v,o,r,g=C.ajaxSetup({},t),m=g.context||g,y=g.context&&(m.nodeType||m.jquery)?C(m):C.event,w=C.Deferred(),b=C.Callbacks("once memory"),x=g.statusCode||{},s={},a={},l="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n)for(n={};t=Ft.exec(p);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==h&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)S.always(e[S.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),c(0,t),this}};if(w.promise(S),g.url=((e||g.url||Ht.href)+"").replace(Xt,Ht.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(M)||[""],null==g.crossDomain){i=k.createElement("a");try{i.href=g.url,i.href=i.href,g.crossDomain=Gt.protocol+"//"+Gt.host!=i.protocol+"//"+i.host}catch(e){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=C.param(g.data,g.traditional)),Qt(_t,g,t,S),h)return S;for(o in(v=C.event&&g.global)&&0==C.active++&&C.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Ut.test(g.type),d=g.url.replace(Wt,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Rt,"+")):(r=g.url.slice(d.length),g.data&&(g.processData||"string"==typeof g.data)&&(d+=(Nt.test(d)?"&":"?")+g.data,delete g.data),!1===g.cache&&(d=d.replace(Bt,"$1"),r=(Nt.test(d)?"&":"?")+"_="+Dt.guid+++r),g.url=d+r),g.ifModified&&(C.lastModified[d]&&S.setRequestHeader("If-Modified-Since",C.lastModified[d]),C.etag[d]&&S.setRequestHeader("If-None-Match",C.etag[d])),(g.data&&g.hasContent&&!1!==g.contentType||t.contentType)&&S.setRequestHeader("Content-Type",g.contentType),S.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Vt+"; q=0.01":""):g.accepts["*"]),g.headers)S.setRequestHeader(o,g.headers[o]);if(g.beforeSend&&(!1===g.beforeSend.call(m,S,g)||h))return S.abort();if(l="abort",b.add(g.complete),S.done(g.success),S.fail(g.error),u=Qt(Yt,g,t,S)){if(S.readyState=1,v&&y.trigger("ajaxSend",[S,g]),h)return S;g.async&&0<g.timeout&&(f=T.setTimeout(function(){S.abort("timeout")},g.timeout));try{h=!1,u.send(s,c)}catch(e){if(h)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,n,i){var o,r,s,a,l,c=t;h||(h=!0,f&&T.clearTimeout(f),u=void 0,p=i||"",S.readyState=0<e?4:0,o=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s=s||o}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(g,S,n)),!o&&-1<C.inArray("script",g.dataTypes)&&(g.converters["text script"]=function(){}),a=function(e,t,n,i){var o,r,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(g,a,S,o),o?(g.ifModified&&((l=S.getResponseHeader("Last-Modified"))&&(C.lastModified[d]=l),(l=S.getResponseHeader("etag"))&&(C.etag[d]=l)),204===e||"HEAD"===g.type?c="nocontent":304===e?c="notmodified":(c=a.state,r=a.data,o=!(s=a.error))):(s=c,!e&&c||(c="error",e<0&&(e=0))),S.status=e,S.statusText=(t||c)+"",o?w.resolveWith(m,[r,c,S]):w.rejectWith(m,[S,c,s]),S.statusCode(x),x=void 0,v&&y.trigger(o?"ajaxSuccess":"ajaxError",[S,g,o?r:s]),b.fireWith(m,[S,c]),v&&(y.trigger("ajaxComplete",[S,g]),--C.active||C.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,o){C[o]=function(e,t,n,i){return w(t)&&(i=i||n,n=t,t=void 0),C.ajax(C.extend({url:e,type:o,dataType:i,data:t,success:n},C.isPlainObject(e)&&e))}}),C.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(w(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return w(n)?this.each(function(e){C(this).wrapInner(n.call(this,e))}):this.each(function(){var e=C(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=w(t);return this.each(function(e){C(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new T.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},en=C.ajaxSettings.xhr();y.cors=!!en&&"withCredentials"in en,y.ajax=en=!!en,C.ajaxTransport(function(o){var r,s;if(y.cors||en&&!o.crossDomain)return{send:function(e,t){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Zt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),s=i.onerror=i.ontimeout=r("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&T.setTimeout(function(){r&&s()})},r=r("abort");try{i.send(o.hasContent&&o.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),C.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(n){var i,o;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=C("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(e){i.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),k.head.appendChild(i[0])},abort:function(){o&&o()}}});var tn,nn=[],on=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=nn.pop()||C.expando+"_"+Dt.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,n){var i,o,r,s=!1!==e.jsonp&&(on.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&on.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=w(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(on,"$1"+i):!1!==e.jsonp&&(e.url+=(Nt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return r||C.error(i+" was not called"),r[0]},e.dataTypes[0]="json",o=T[i],T[i]=function(){r=arguments},n.always(function(){void 0===o?C(T).removeProp(i):T[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,nn.push(i)),r&&w(o)&&o(r[0]),r=o=void 0}),"script"}),y.createHTMLDocument=((tn=k.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===tn.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((i=(t=k.implementation.createHTMLDocument("")).createElement("base")).href=k.location.href,t.head.appendChild(i)):t=k),r=!n&&[],(o=$.exec(e))?[t.createElement(o[1])]:(o=we([e],t,r),r&&r.length&&C(r).remove(),C.merge([],o.childNodes)));var i,o,r},C.fn.load=function(e,t,n){var i,o,r,s=this,a=e.indexOf(" ");return-1<a&&(i=Et(e.slice(a)),e=e.slice(0,a)),w(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),0<s.length&&C.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},C.expr.pseudos.animated=function(t){return C.grep(C.timers,function(e){return t===e.elem}).length},C.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c=C.css(e,"position"),u=C(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),r=C.css(e,"top"),l=C.css(e,"left"),o=("absolute"===c||"fixed"===c)&&-1<(r+l).indexOf("auto")?(s=(i=u.position()).top,i.left):(s=parseFloat(r)||0,parseFloat(l)||0),w(t)&&(t=t.call(e,n,C.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},C.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){C.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===C.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),o.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-C.css(i,"marginTop",!0),left:t.left-o.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||ie})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var r="pageYOffset"===o;C.fn[t]=function(e){return B(this,function(e,t,n){var i;if(v(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n)return i?i[o]:e[t];i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):e[t]=n},t,e,arguments.length)}}),C.each(["top","left"],function(e,n){C.cssHooks[n]=Je(y.pixelPosition,function(e,t){if(t)return t=Qe(e,n),_e.test(t)?C(e).position()[n]+"px":t})}),C.each({Height:"height",Width:"width"},function(s,a){C.each({padding:"inner"+s,content:a,"":"outer"+s},function(i,r){C.fn[r]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),o=i||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,n){var i;return v(e)?0===r.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+s],i["scroll"+s],e.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?C.css(e,t,o):C.style(e,t,n,o)},a,n?e:void 0,n)}})}),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){C.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var rn=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;C.proxy=function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),w(e))return i=a.call(arguments,2),(o=function(){return e.apply(t||this,i.concat(a.call(arguments)))}).guid=e.guid=e.guid||C.guid++,o},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=A,C.isFunction=w,C.isWindow=v,C.camelCase=_,C.type=x,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(rn,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return C});var sn=T.jQuery,an=T.$;return C.noConflict=function(e){return T.$===C&&(T.$=an),e&&T.jQuery===C&&(T.jQuery=sn),C},void 0===e&&(T.jQuery=T.$=C),C}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(c){"use strict";var o,s=window.Slick||{};o=0,(s=function(e,t){var n,i=this;i.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(e),appendDots:c(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return c('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},i.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(i,i.initials),i.activeBreakpoint=null,i.animType=null,i.animProp=null,i.breakpoints=[],i.breakpointSettings=[],i.cssTransitions=!1,i.focussed=!1,i.interrupted=!1,i.hidden="hidden",i.paused=!0,i.positionProp=null,i.respondTo=null,i.rowCount=1,i.shouldClick=!0,i.$slider=c(e),i.$slidesCache=null,i.transformType=null,i.transitionType=null,i.visibilityChange="visibilitychange",i.windowWidth=0,i.windowTimer=null,n=c(e).data("slick")||{},i.options=c.extend({},i.defaults,t,n),i.currentSlide=i.options.initialSlide,i.originalSettings=i.options,void 0!==document.mozHidden?(i.hidden="mozHidden",i.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(i.hidden="webkitHidden",i.visibilityChange="webkitvisibilitychange"),i.autoPlay=c.proxy(i.autoPlay,i),i.autoPlayClear=c.proxy(i.autoPlayClear,i),i.autoPlayIterator=c.proxy(i.autoPlayIterator,i),i.changeSlide=c.proxy(i.changeSlide,i),i.clickHandler=c.proxy(i.clickHandler,i),i.selectHandler=c.proxy(i.selectHandler,i),i.setPosition=c.proxy(i.setPosition,i),i.swipeHandler=c.proxy(i.swipeHandler,i),i.dragHandler=c.proxy(i.dragHandler,i),i.keyHandler=c.proxy(i.keyHandler,i),i.instanceUid=o++,i.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,i.registerBreakpoints(),i.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},s.prototype.addSlide=s.prototype.slickAdd=function(e,t,n){var i=this;if("boolean"==typeof t)n=t,t=null;else if(t<0||t>=i.slideCount)return!1;i.unload(),"number"==typeof t?0===t&&0===i.$slides.length?c(e).appendTo(i.$slideTrack):n?c(e).insertBefore(i.$slides.eq(t)):c(e).insertAfter(i.$slides.eq(t)):!0===n?c(e).prependTo(i.$slideTrack):c(e).appendTo(i.$slideTrack),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slides.each(function(e,t){c(t).attr("data-slick-index",e)}),i.$slidesCache=i.$slides,i.reinit()},s.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},s.prototype.animateSlide=function(e,t){var n={},i=this;i.animateHeight(),!0===i.options.rtl&&!1===i.options.vertical&&(e=-e),!1===i.transformsEnabled?!1===i.options.vertical?i.$slideTrack.animate({left:e},i.options.speed,i.options.easing,t):i.$slideTrack.animate({top:e},i.options.speed,i.options.easing,t):!1===i.cssTransitions?(!0===i.options.rtl&&(i.currentLeft=-i.currentLeft),c({animStart:i.currentLeft}).animate({animStart:e},{duration:i.options.speed,easing:i.options.easing,step:function(e){e=Math.ceil(e),!1===i.options.vertical?n[i.animType]="translate("+e+"px, 0px)":n[i.animType]="translate(0px,"+e+"px)",i.$slideTrack.css(n)},complete:function(){t&&t.call()}})):(i.applyTransition(),e=Math.ceil(e),!1===i.options.vertical?n[i.animType]="translate3d("+e+"px, 0px, 0px)":n[i.animType]="translate3d(0px,"+e+"px, 0px)",i.$slideTrack.css(n),t&&setTimeout(function(){i.disableTransition(),t.call()},i.options.speed))},s.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=c(e).not(this.$slider)),e},s.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var e=c(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},s.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},s.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},s.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},s.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},s.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=c(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=c(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},s.prototype.buildDots=function(){var e,t,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),t=c("<ul />").addClass(n.options.dotsClass),e=0;e<=n.getDotCount();e+=1)t.append(c("<li />").append(n.options.customPaging.call(this,n,e)));n.$dots=t.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},s.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){c(t).attr("data-slick-index",e).data("originalStyling",c(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?c('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),c("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},s.prototype.buildRows=function(){var e,t,n,i,o,r,s,a=this;if(i=document.createDocumentFragment(),r=a.$slider.children(),0<a.options.rows){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var u=e*s+(t*a.options.slidesPerRow+n);r.get(u)&&c.appendChild(r.get(u))}l.appendChild(c)}i.appendChild(l)}a.$slider.empty().append(i),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},s.prototype.checkResponsive=function(e,t){var n,i,o,r=this,s=!1,a=r.$slider.width(),l=window.innerWidth||c(window).width();if("window"===r.respondTo?o=l:"slider"===r.respondTo?o=a:"min"===r.respondTo&&(o=Math.min(l,a)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in i=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?o<r.breakpoints[n]&&(i=r.breakpoints[n]):o>r.breakpoints[n]&&(i=r.breakpoints[n]));null!==i?null!==r.activeBreakpoint&&i===r.activeBreakpoint&&!t||(r.activeBreakpoint=i,"unslick"===r.breakpointSettings[i]?r.unslick(i):(r.options=c.extend({},r.originalSettings,r.breakpointSettings[i]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),s=i):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),s=i),e||!1===s||r.$slider.trigger("breakpoint",[r,s])}},s.prototype.changeSlide=function(e,t){var n,i,o=this,r=c(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),n=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,e.data.message){case"previous":i=0==n?o.options.slidesToScroll:o.options.slidesToShow-n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-i,!1,t);break;case"next":i=0==n?o.options.slidesToScroll:n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+i,!1,t);break;case"index":var s=0===e.data.index?0:e.data.index||r.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(s),!1,t),r.children().trigger("focus");break;default:return}},s.prototype.checkNavigable=function(e){var t,n;if(n=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var i in t){if(e<t[i]){e=n;break}n=t[i]}return e},s.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(c("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",c.proxy(e.interrupt,e,!0)).off("mouseleave.slick",c.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),c(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().off("click.slick",e.selectHandler),c(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),c(window).off("resize.slick.slick-"+e.instanceUid,e.resize),c("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),c(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},s.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",c.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",c.proxy(e.interrupt,e,!1))},s.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},s.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},s.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),c(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},s.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(t):this.$slides.eq(e).css(t)},s.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout(function(){n.disableTransition(e),t.call()},n.options.speed))},s.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},s.prototype.filterSlides=s.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},s.prototype.focusHandler=function(){var n=this;n.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(e){e.stopImmediatePropagation();var t=c(this);setTimeout(function(){n.options.pauseOnFocus&&(n.focussed=t.is(":focus"),n.autoPlay())},0)})},s.prototype.getCurrent=s.prototype.slickCurrentSlide=function(){return this.currentSlide},s.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},s.prototype.getLeft=function(e){var t,n,i,o,r=this,s=0;return r.slideOffset=0,n=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=n*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(s=e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,(r.options.slidesToShow-(e-r.slideCount))*n*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,r.slideCount%r.options.slidesToScroll*n*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(e+r.options.slidesToShow-r.slideCount)*n),r.slideCount<=r.options.slidesToShow&&(s=r.slideOffset=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*n*-1+s,!0===r.options.variableWidth&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,!0===r.options.centerMode&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,t+=(r.$list.width()-i.outerWidth())/2)),t},s.prototype.getOption=s.prototype.slickGetOption=function(e){return this.options[e]},s.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,o=[];for(e=!1===t.options.infinite?t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,2*t.slideCount);n<e;)o.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},s.prototype.getSlick=function(){return this},s.prototype.getSlideCount=function(){var n,i,o=this;return i=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0,!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(e,t){if(t.offsetLeft-i+c(t).outerWidth()/2>-1*o.swipeLeft)return n=t,!1}),Math.abs(c(n).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},s.prototype.goTo=s.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},s.prototype.init=function(e){var t=this;c(t.$slider).hasClass("slick-initialized")||(c(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},s.prototype.initADA=function(){var i=this,n=Math.ceil(i.slideCount/i.options.slidesToShow),o=i.getNavigableIndexes().filter(function(e){return 0<=e&&e<i.slideCount});i.$slides.add(i.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==i.$dots&&(i.$slides.not(i.$slideTrack.find(".slick-cloned")).each(function(e){var t=o.indexOf(e);if(c(this).attr({role:"tabpanel",id:"slick-slide"+i.instanceUid+e,tabindex:-1}),-1!==t){var n="slick-slide-control"+i.instanceUid+t;c("#"+n).length&&c(this).attr({"aria-describedby":n})}}),i.$dots.attr("role","tablist").find("li").each(function(e){var t=o[e];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+i.instanceUid+e,"aria-controls":"slick-slide"+i.instanceUid+t,"aria-label":e+1+" of "+n,"aria-selected":null,tabindex:"-1"})}).eq(i.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=i.currentSlide,t=e+i.options.slidesToShow;e<t;e++)i.options.focusOnChange?i.$slides.eq(e).attr({tabindex:"0"}):i.$slides.eq(e).removeAttr("tabindex");i.activateADA()},s.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},s.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(c("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&c("li",e.$dots).on("mouseenter.slick",c.proxy(e.interrupt,e,!0)).on("mouseleave.slick",c.proxy(e.interrupt,e,!1))},s.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",c.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",c.proxy(e.interrupt,e,!1)))},s.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),c(document).on(e.visibilityChange,c.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),c(window).on("orientationchange.slick.slick-"+e.instanceUid,c.proxy(e.orientationChange,e)),c(window).on("resize.slick.slick-"+e.instanceUid,c.proxy(e.resize,e)),c("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),c(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),c(e.setPosition)},s.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},s.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},s.prototype.lazyLoad=function(){var e,t,n,r=this;function i(e){c("img[data-lazy]",e).each(function(){var e=c(this),t=c(this).attr("data-lazy"),n=c(this).attr("data-srcset"),i=c(this).attr("data-sizes")||r.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){e.animate({opacity:0},100,function(){n&&(e.attr("srcset",n),i&&e.attr("sizes",i)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,e,t])})},o.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,t])},o.src=t})}if(!0===r.options.centerMode?n=!0===r.options.infinite?(t=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(t=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),r.options.slidesToShow/2+1+2+r.currentSlide):(t=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,n=Math.ceil(t+r.options.slidesToShow),!0===r.options.fade&&(0<t&&t--,n<=r.slideCount&&n++)),e=r.$slider.find(".slick-slide").slice(t,n),"anticipated"===r.options.lazyLoad)for(var o=t-1,s=n,a=r.$slider.find(".slick-slide"),l=0;l<r.options.slidesToScroll;l++)o<0&&(o=r.slideCount-1),e=(e=e.add(a.eq(o))).add(a.eq(s)),o--,s++;i(e),r.slideCount<=r.options.slidesToShow?i(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?i(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&i(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},s.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},s.prototype.next=s.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},s.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},s.prototype.pause=s.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},s.prototype.play=s.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},s.prototype.postSlide=function(e){var t=this;t.unslicked||(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange&&c(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()))},s.prototype.prev=s.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},s.prototype.preventDefault=function(e){e.preventDefault()},s.prototype.progressiveLazyLoad=function(e){e=e||1;var t,n,i,o,r,s=this,a=c("img[data-lazy]",s.$slider);a.length?(t=a.first(),n=t.attr("data-lazy"),i=t.attr("data-srcset"),o=t.attr("data-sizes")||s.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,t,n]),s.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout(function(){s.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,n]),s.progressiveLazyLoad())},r.src=n):s.$slider.trigger("allImagesLoaded",[s])},s.prototype.refresh=function(e){var t,n,i=this;n=i.slideCount-i.options.slidesToShow,!i.options.infinite&&i.currentSlide>n&&(i.currentSlide=n),i.slideCount<=i.options.slidesToShow&&(i.currentSlide=0),t=i.currentSlide,i.destroy(!0),c.extend(i,i.initials,{currentSlide:t}),i.init(),e||i.changeSlide({data:{message:"index",index:t}},!1)},s.prototype.registerBreakpoints=function(){var e,t,n,i=this,o=i.options.responsive||null;if("array"===c.type(o)&&o.length){for(e in i.respondTo=i.options.respondTo||"window",o)if(n=i.breakpoints.length-1,o.hasOwnProperty(e)){for(t=o[e].breakpoint;0<=n;)i.breakpoints[n]&&i.breakpoints[n]===t&&i.breakpoints.splice(n,1),n--;i.breakpoints.push(t),i.breakpointSettings[t]=o[e].settings}i.breakpoints.sort(function(e,t){return i.options.mobileFirst?e-t:t-e})}},s.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&c(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},s.prototype.resize=function(){var e=this;c(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=c(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},s.prototype.removeSlide=s.prototype.slickRemove=function(e,t,n){var i=this;if(e="boolean"==typeof e?!0===(t=e)?0:i.slideCount-1:!0===t?--e:e,i.slideCount<1||e<0||e>i.slideCount-1)return!1;i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},s.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled||(!(o={})===i.cssTransitions?o[i.animType]="translate("+t+", "+n+")":o[i.animType]="translate3d("+t+", "+n+", 0px)"),i.$slideTrack.css(o)},s.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},s.prototype.setFade=function(){var n,i=this;i.$slides.each(function(e,t){n=i.slideWidth*e*-1,!0===i.options.rtl?c(t).css({position:"relative",right:n,top:0,zIndex:i.options.zIndex-2,opacity:0}):c(t).css({position:"relative",left:n,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},s.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},s.prototype.setOption=s.prototype.slickSetOption=function(){var e,t,n,i,o,r=this,s=!1;if("object"===c.type(arguments[0])?(n=arguments[0],s=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(i=arguments[1],s=arguments[2],"responsive"===(n=arguments[0])&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[n]=i;else if("multiple"===o)c.each(n,function(e,t){r.options[e]=t});else if("responsive"===o)for(t in i)if("array"!==c.type(r.options.responsive))r.options.responsive=[i[t]];else{for(e=r.options.responsive.length-1;0<=e;)r.options.responsive[e].breakpoint===i[t].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(i[t])}s&&(r.unload(),r.reinit())},s.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},s.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},s.prototype.setSlideClasses=function(e){var t,n,i,o,r=this;if(n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(t<=e&&e<=r.slideCount-1-t?r.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+e,n.slice(i-t+1+s,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},s.prototype.setupInfinite=function(){var e,t,n,i=this;if(!0===i.options.fade&&(i.options.centerMode=!1),!0===i.options.infinite&&!1===i.options.fade&&(t=null,i.slideCount>i.options.slidesToShow)){for(n=!0===i.options.centerMode?i.options.slidesToShow+1:i.options.slidesToShow,e=i.slideCount;e>i.slideCount-n;--e)t=e-1,c(i.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-i.slideCount).prependTo(i.$slideTrack).addClass("slick-cloned");for(e=0;e<n+i.slideCount;e+=1)t=e,c(i.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+i.slideCount).appendTo(i.$slideTrack).addClass("slick-cloned");i.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},s.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},s.prototype.selectHandler=function(e){var t=c(e.target).is(".slick-slide")?c(e.target):c(e.target).parents(".slick-slide"),n=parseInt(t.attr("data-slick-index"));n=n||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(n,!1,!0):this.slideHandler(n)},s.prototype.slideHandler=function(e,t,n){var i,o,r,s,a,l,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))if(!1===t&&c.asNavFor(e),i=e,a=c.getLeft(i),s=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?s:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=i<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+i:i>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:i-c.slideCount:i,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),r=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==n?(c.fadeSlideOut(r),c.fadeSlide(o,function(){c.postSlide(o)})):c.postSlide(o),void c.animateHeight();!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,function(){c.postSlide(o)}):c.postSlide(o)}},s.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},s.prototype.swipeDirection=function(){var e,t,n,i,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,n=Math.atan2(t,e),(i=Math.round(180*n/Math.PI))<0&&(i=360-Math.abs(i)),i<=45&&0<=i||i<=360&&315<=i?!1===o.options.rtl?"left":"right":135<=i&&i<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?35<=i&&i<=135?"down":"up":"vertical"},s.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1;if(i.interrupted=!1,i.shouldClick=!(10<i.touchObject.swipeLength),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},s.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},s.prototype.swipeMove=function(e){var t,n,i,o,r,s,a=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<s?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),n=a.swipeDirection(),void 0!==e.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),i=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===n||a.currentSlide>=a.getDotCount()&&"left"===n)&&(i=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+i*o:a.swipeLeft=t+i*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+i*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},s.prototype.swipeStart=function(e){var t,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return!(n.touchObject={});void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},s.prototype.unfilterSlides=s.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},s.prototype.unload=function(){var e=this;c(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},s.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},s.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},s.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},s.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){var e,t,n=this,i=arguments[0],o=Array.prototype.slice.call(arguments,1),r=n.length;for(e=0;e<r;e++)if("object"==typeof i||void 0===i?n[e].slick=new s(n[e],i):t=n[e].slick[i].apply(n[e].slick,o),void 0!==t)return t;return n}}),function(e,t,n,i){"function"==typeof define&&define.amd?define(function(){return e.fullpage=i(t,n),e.fullpage}):"object"==typeof exports?module.exports=i(t,n):t.fullpage=i(t,n)}(this,window,document,function(It,zt){"use strict";var Rt="fullpage-wrapper",Wt="."+Rt,Bt="fp-responsive",Ft="fp-notransition",Ut="fp-destroyed",Xt="fp-enabled",_t="fp-viewing",Yt="active",Vt="."+Yt,Gt="fp-completely",Kt="fp-section",Qt="."+Kt,Jt=Qt+Vt,Zt="fp-tableCell",en="."+Zt,tn="fp-auto-height",nn="fp-normal-scroll",on="#fp-nav",rn="fp-tooltip",sn="fp-slide",an="."+sn,ln=an+Vt,cn="fp-slides",un="."+cn,dn="fp-slidesContainer",pn="."+dn,fn="fp-table",hn="fp-slidesNav",vn="."+hn,gn=vn+" a",e="fp-controlArrow",mn="."+e,yn="fp-prev",wn=mn+".fp-prev",bn=mn+".fp-next";function xn(e,t){It.console&&It.console[e]&&It.console[e]("fullPage: "+t)}function Sn(e,t){return(t=1<arguments.length?t:zt)?t.querySelectorAll(e):null}function Tn(e){e=e||{};for(var t=1,n=arguments.length;t<n;++t){var i=arguments[t];if(i)for(var o in i)i.hasOwnProperty(o)&&("[object Object]"!==Object.prototype.toString.call(i[o])?e[o]=i[o]:e[o]=Tn(e[o],i[o]))}return e}function kn(e,t){return null!=e&&(e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className))}function Cn(){return"innerHeight"in It?It.innerHeight:zt.documentElement.offsetHeight}function En(){return It.innerWidth}function An(e,t){var n;for(n in e=s(e),t)if(t.hasOwnProperty(n)&&null!==n)for(var i=0;i<e.length;i++){e[i].style[n]=t[n]}return e}function n(e,t,n){for(var i=e[n];i&&!Kn(i,t);)i=i[n];return i}function $n(e,t){return n(e,t,"previousElementSibling")}function Ln(e,t){return n(e,t,"nextElementSibling")}function On(e){return e.previousElementSibling}function jn(e){return e.nextElementSibling}function Hn(e){return e[e.length-1]}function Dn(e,t){e=r(e)?e[0]:e;for(var n=null!=t?Sn(t,e.parentNode):e.parentNode.childNodes,i=0,o=0;o<n.length;o++){if(n[o]==e)return i;1==n[o].nodeType&&i++}return-1}function s(e){return r(e)?e:[e]}function Nn(e){e=s(e);for(var t=0;t<e.length;t++)e[t].style.display="none";return e}function Mn(e){e=s(e);for(var t=0;t<e.length;t++)e[t].style.display="block";return e}function r(e){return"[object Array]"===Object.prototype.toString.call(e)||"[object NodeList]"===Object.prototype.toString.call(e)}function Pn(e,t){e=s(e);for(var n=0;n<e.length;n++){var i=e[n];i.classList?i.classList.add(t):i.className+=" "+t}return e}function qn(e,t){e=s(e);for(var n=t.split(" "),i=0;i<n.length;i++){t=n[i];for(var o=0;o<e.length;o++){var r=e[o];r.classList?r.classList.remove(t):r.className=r.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}}return e}function In(e,t){t.appendChild(e)}function i(e,t,n){var i;t=t||zt.createElement("div");for(var o=0;o<e.length;o++){var r=e[o];(!n||o)&&n||(i=t.cloneNode(!0),r.parentNode.insertBefore(i,r)),i.appendChild(r)}return e}function zn(e,t){i(e,t,!0)}function Rn(e,t){for("string"==typeof t&&(t=Jn(t)),e.appendChild(t);e.firstChild!==t;)t.appendChild(e.firstChild)}function Wn(e){for(var t=zt.createDocumentFragment();e.firstChild;)t.appendChild(e.firstChild);e.parentNode.replaceChild(t,e)}function Bn(e,t){return e&&1===e.nodeType?Kn(e,t)?e:Bn(e.parentNode,t):null}function Fn(e,t){o(e,e.nextSibling,t)}function Un(e,t){o(e,e,t)}function o(e,t,n){r(n)||("string"==typeof n&&(n=Jn(n)),n=[n]);for(var i=0;i<n.length;i++)e.parentNode.insertBefore(n[i],t)}function Xn(){var e=zt.documentElement;return(It.pageYOffset||e.scrollTop)-(e.clientTop||0)}function _n(t){return Array.prototype.filter.call(t.parentNode.children,function(e){return e!==t})}function Yn(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function Vn(e){if("function"==typeof e)return!0;var t=Object.prototype.toString(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}function Gn(e,t,n){var i;n=void 0===n?{}:n,"function"==typeof It.CustomEvent?i=new CustomEvent(t,{detail:n}):(i=zt.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,n),e.dispatchEvent(i)}function Kn(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}function Qn(e,t){if("boolean"==typeof t)for(var n=0;n<e.length;n++)e[n].style.display=t?"block":"none";return e}function Jn(e){var t=zt.createElement("div");return t.innerHTML=e.trim(),t.firstChild}function Zn(e){e=s(e);for(var t=0;t<e.length;t++){var n=e[t];n&&n.parentElement&&n.parentNode.removeChild(n)}}function a(e,t,n){for(var i=e[n],o=[];i;)!Kn(i,t)&&null!=t||o.push(i),i=i[n];return o}function ei(e,t){return a(e,t,"nextElementSibling")}function ti(e,t){return a(e,t,"previousElementSibling")}return It.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(e,t){t=t||It;for(var n=0;n<this.length;n++)e.call(t,this[n],n,this)}),It.fp_utils={$:Sn,deepExtend:Tn,hasClass:kn,getWindowHeight:Cn,css:An,until:n,prevUntil:$n,nextUntil:Ln,prev:On,next:jn,last:Hn,index:Dn,getList:s,hide:Nn,show:Mn,isArrayOrList:r,addClass:Pn,removeClass:qn,appendTo:In,wrap:i,wrapAll:zn,wrapInner:Rn,unwrap:Wn,closest:Bn,after:Fn,before:Un,insertBefore:o,getScrollTop:Xn,siblings:_n,preventDefault:Yn,isFunction:Vn,trigger:Gn,matches:Kn,toggle:Qn,createElementFromHTML:Jn,remove:Zn,filter:function(e,t){Array.prototype.filter.call(e,t)},untilAll:a,nextAll:ei,prevAll:ti,showError:xn},function(e,S){var n=S&&new RegExp("([\\d\\w]{8}-){3}[\\d\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$").test(S.licenseKey)||-1<zt.domain.indexOf("alvarotrigo.com"),o=Sn("html, body"),s=Sn("html")[0],T=Sn("body")[0];if(!kn(s,Xt)){var h={};S=Tn({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:It.fp_scrolloverflow?It.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,touchWrapper:"string"==typeof e?Sn(e)[0]:e,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},cards:!1,cardsOptions:{perspective:100,fadeContent:!0,fadeBackground:!0},sectionSelector:".section",slideSelector:".slide",v2compatible:!1,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},S);var k,r,c,i,a=!1,l=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),u="ontouchstart"in It||0<navigator.msMaxTouchPoints||navigator.maxTouchPoints,d="string"==typeof e?Sn(e)[0]:e,C=Cn(),p=En(),E=!1,t=!0,A=!0,f=[],v={m:{up:!0,down:!0,left:!0,right:!0}};v.k=Tn({},v.m);var g,m,y,w,b,$,L,x,O,j=function(){var e;e=It.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"};return e}(),H={touchmove:"ontouchmove"in It?"touchmove":j.move,touchstart:"ontouchstart"in It?"touchstart":j.down},D='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',N=!1;try{var M=Object.defineProperty({},"passive",{get:function(){N=!0}});It.addEventListener("testPassive",null,M),It.removeEventListener("testPassive",null,M)}catch(e){}var P,q,I,z=Tn({},S),R=!1,W=!0,B=["parallax","scrollOverflowReset","dragAndMove","offsetSections","fadingEffect","responsiveSlides","continuousHorizontal","interlockedSlides","scrollHorizontally","resetSliders","cards"];Ht(),It.fp_easings=Tn(It.fp_easings,{easeInOutCubic:function(e,t,n,i){return(e/=i/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t}}),d&&(h.version="3.0.8",h.setAutoScrolling=Z,h.setRecordHistory=ee,h.setScrollingSpeed=te,h.setFitToSection=ne,h.setLockAnchors=function(e){S.lockAnchors=e},h.setMouseWheelScrolling=ie,h.setAllowScrolling=oe,h.setKeyboardScrolling=se,h.moveSectionUp=ae,h.moveSectionDown=le,h.silentMoveTo=ce,h.moveTo=ue,h.moveSlideRight=de,h.moveSlideLeft=pe,h.fitToSection=Ee,h.reBuild=fe,h.setResponsive=ve,h.getFullpageData=function(){return S},h.destroy=function(e){Z(!1,"internal"),oe(!0),re(!1),se(!1),Pn(d,Ut),[b,w,m,$,L,O,y,I].forEach(function(e){clearTimeout(e)}),It.removeEventListener("scroll",Ce),It.removeEventListener("hashchange",Qe),It.removeEventListener("resize",ct),zt.removeEventListener("keydown",Ze),zt.removeEventListener("keyup",et),["click","touchstart"].forEach(function(e){zt.removeEventListener(e,ge)}),["mouseenter","touchstart","mouseleave","touchend"].forEach(function(e){zt.removeEventListener(e,ye,!0)}),e&&($t(0),Sn("img[data-src], source[data-src], audio[data-src], iframe[data-src]",d).forEach(function(e){Be(e,"src")}),Sn("img[data-srcset]").forEach(function(e){Be(e,"srcset")}),Zn(Sn(on+", "+vn+", "+mn)),An(Sn(Qt),{height:"","background-color":"",padding:""}),An(Sn(an),{width:""}),An(d,{height:"",position:"","-ms-touch-action":"","touch-action":""}),An(o,{overflow:"",height:""}),qn(s,Xt),qn(T,Bt),T.className.split(/\s+/).forEach(function(e){0===e.indexOf(_t)&&qn(T,e)}),Sn(Qt+", "+an).forEach(function(e){S.scrollOverflowHandler&&S.scrollOverflow&&S.scrollOverflowHandler.remove(e),qn(e,fn+" "+Yt+" "+Gt),e.getAttribute("data-fp-styles")&&e.setAttribute("style",e.getAttribute("data-fp-styles")),kn(e,Kt)&&!R&&e.removeAttribute("data-anchor")}),ft(d),[en,pn,un].forEach(function(e){Sn(e,d).forEach(function(e){Wn(e)})}),An(d,{"-webkit-transition":"none",transition:"none"}),It.scrollTo(0,0),[Kt,sn,dn].forEach(function(e){qn(Sn("."+e),e)}))},h.getActiveSection=function(){return new Pt(Sn(Jt)[0])},h.getActiveSlide=function(){return ze(Sn(ln,Sn(Jt)[0])[0])},h.test={top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var e=[],t=0;t<Sn(S.sectionSelector,d).length;t++)e.push("translate3d(0px, 0px, 0px)");return e}(),left:function(){for(var e=[],t=0;t<Sn(S.sectionSelector,d).length;t++)e.push(0);return e}(),options:S,setAutoScrolling:Z},h.shared={afterRenderActions:ke,isNormalScrollElement:!1},It.fullpage_api=h,S.$&&Object.keys(h).forEach(function(e){S.$.fn.fullpage[e]=h[e]}),function(){S.css3&&(S.css3=function(){var e,t=zt.createElement("p"),n={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var i in t.style.display="block",zt.body.insertBefore(t,null),n)void 0!==t.style[i]&&(t.style[i]="translate3d(1px,1px,1px)",e=It.getComputedStyle(t).getPropertyValue(n[i]));return zt.body.removeChild(t),void 0!==e&&0<e.length&&"none"!==e}());S.scrollBar=S.scrollBar||S.hybrid,function(){if(!S.anchors.length){var e="[data-anchor]",t=Sn(S.sectionSelector.split(",").join(e+",")+e,d);t.length&&t.length===Sn(Qt).length&&(R=!0,t.forEach(function(e){S.anchors.push(e.getAttribute("data-anchor").toString())}))}if(!S.navigationTooltips.length){var n="[data-tooltip]",i=Sn(S.sectionSelector.split(",").join(n+",")+n,d);i.length&&i.forEach(function(e){S.navigationTooltips.push(e.getAttribute("data-tooltip").toString())})}}(),function(){An(d,{height:"100%",position:"relative"}),Pn(d,Rt),Pn(s,Xt),C=Cn(),qn(d,Ut),Pn(Sn(S.sectionSelector,d),Kt),Pn(Sn(S.slideSelector,d),sn);for(var e=Sn(Qt),t=0;t<e.length;t++){var n=t,i=e[t],o=Sn(an,i),r=o.length;i.setAttribute("data-fp-styles",i.getAttribute("style")),xe(i,n),Se(i,n),0<r?be(i,o,r):S.verticalCentered&&gt(i)}S.fixedElements&&S.css3&&Sn(S.fixedElements).forEach(function(e){T.appendChild(e)});S.navigation&&function(){var e=zt.createElement("div");e.setAttribute("id","fp-nav");var t=zt.createElement("ul");e.appendChild(t),In(e,T);var n=Sn(on)[0];Pn(n,"fp-"+S.navigationPosition),S.showActiveTooltip&&Pn(n,"fp-show-active");for(var i="",o=0;o<Sn(Qt).length;o++){var r="";S.anchors.length&&(r=S.anchors[o]),i+='<li><a href="#'+r+'"><span class="fp-sr-only">'+Te(o,"Section")+"</span><span></span></a>";var s=S.navigationTooltips[o];void 0!==s&&""!==s&&(i+='<div class="'+rn+" fp-"+S.navigationPosition+'">'+s+"</div>"),i+="</li>"}Sn("ul",n)[0].innerHTML=i;var a=Sn("li",Sn(on)[0])[Dn(Sn(Jt)[0],Qt)];Pn(Sn("a",a),Yt)}();Sn('iframe[src*="youtube.com/embed/"]',d).forEach(function(e){var t,n,i;n="enablejsapi=1",i=(t=e).getAttribute("src"),t.setAttribute("src",i+function(e){return/\?/.test(e)?"&":"?"}(i)+n)}),S.scrollOverflow&&(g=S.scrollOverflowHandler.init(S))}(),oe(!0),re(!0),Z(S.autoScrolling,"internal"),dt(),Ct(),"complete"===zt.readyState&&Ke();It.addEventListener("load",Ke),S.scrollOverflow||ke();!function(){for(var e=1;e<4;e++)O=setTimeout(we,350*e)}()}(),It.addEventListener("scroll",Ce),It.addEventListener("hashchange",Qe),It.addEventListener("focus",ot),It.addEventListener("blur",rt),It.addEventListener("resize",ct),zt.addEventListener("keydown",Ze),zt.addEventListener("keyup",et),["click","touchstart"].forEach(function(e){zt.addEventListener(e,ge)}),S.normalScrollElements&&(["mouseenter","touchstart"].forEach(function(e){me(e,!1)}),["mouseleave","touchend"].forEach(function(e){me(e,!0)})));var F=!1,U=0,X=0,_=0,Y=0,V=0,G=(new Date).getTime(),K=0,Q=0,J=C;return h}function Z(e,t){e||$t(0),jt("autoScrolling",e,t);var n=Sn(Jt)[0];if(S.autoScrolling&&!S.scrollBar)An(o,{overflow:"hidden",height:"100%"}),ee(z.recordHistory,"internal"),An(d,{"-ms-touch-action":"none","touch-action":"none"}),null!=n&&$t(n.offsetTop);else if(An(o,{overflow:"visible",height:"initial"}),ee(!!S.autoScrolling&&z.recordHistory,"internal"),An(d,{"-ms-touch-action":"","touch-action":""}),null!=n){var i=Re(n.offsetTop);i.element.scrollTo(0,i.options)}}function ee(e,t){jt("recordHistory",e,t)}function te(e,t){jt("scrollingSpeed",e,t)}function ne(e,t){jt("fitToSection",e,t)}function ie(e){e?(function(){var e,t="";It.addEventListener?e="addEventListener":(e="attachEvent",t="on");var n="onwheel"in zt.createElement("div")?"wheel":void 0!==zt.onmousewheel?"mousewheel":"DOMMouseScroll",i=!!N&&{passive:!1};"DOMMouseScroll"==n?zt[e](t+"MozMousePixelScroll",De,i):zt[e](t+n,De,i)}(),d.addEventListener("mousedown",tt),d.addEventListener("mouseup",nt)):(zt.addEventListener?(zt.removeEventListener("mousewheel",De,!1),zt.removeEventListener("wheel",De,!1),zt.removeEventListener("MozMousePixelScroll",De,!1)):zt.detachEvent("onmousewheel",De),d.removeEventListener("mousedown",tt),d.removeEventListener("mouseup",nt))}function oe(t,e){void 0!==e?(e=e.replace(/ /g,"").split(",")).forEach(function(e){Ot(t,e,"m")}):Ot(t,"all","m")}function re(e){e?(ie(!0),function(){if(l||u){S.autoScrolling&&(T.removeEventListener(H.touchmove,$e,{passive:!1}),T.addEventListener(H.touchmove,$e,{passive:!1}));var e=S.touchWrapper;e.removeEventListener(H.touchstart,je),e.removeEventListener(H.touchmove,Le,{passive:!1}),e.addEventListener(H.touchstart,je),e.addEventListener(H.touchmove,Le,{passive:!1})}}()):(ie(!1),function(){if(l||u){S.autoScrolling&&(T.removeEventListener(H.touchmove,Le,{passive:!1}),T.removeEventListener(H.touchmove,$e,{passive:!1}));var e=S.touchWrapper;e.removeEventListener(H.touchstart,je),e.removeEventListener(H.touchmove,Le,{passive:!1})}}())}function se(t,e){void 0!==e?(e=e.replace(/ /g,"").split(",")).forEach(function(e){Ot(t,e,"k")}):(Ot(t,"all","k"),S.keyboardScrolling=t)}function ae(){var e=$n(Sn(Jt)[0],Qt);e||!S.loopTop&&!S.continuousVertical||(e=Hn(Sn(Qt))),null!=e&&Pe(e,null,!0)}function le(){var e=Ln(Sn(Jt)[0],Qt);e||!S.loopBottom&&!S.continuousVertical||(e=Sn(Qt)[0]),null!=e&&Pe(e,null,!1)}function ce(e,t){te(0,"internal"),ue(e,t),te(z.scrollingSpeed,"internal")}function ue(e,t){var n=wt(e);void 0!==t?bt(e,t):null!=n&&Pe(n)}function de(e){Ne("right",e)}function pe(e){Ne("left",e)}function fe(e){if(!kn(d,Ut)){E=!0,C=Cn(),p=En();for(var t=Sn(Qt),n=0;n<t.length;++n){var i=t[n],o=Sn(un,i)[0],r=Sn(an,i);S.verticalCentered&&An(Sn(en,i),{height:mt(i)+"px"}),An(i,{height:C+"px"}),1<r.length&&at(o,Sn(ln,o)[0])}S.scrollOverflow&&g.createScrollBarForAll();var s=Dn(Sn(Jt)[0],Qt);s&&ce(s+1),E=!1,Vn(S.afterResize)&&e&&S.afterResize.call(d,It.innerWidth,It.innerHeight),Vn(S.afterReBuild)&&!e&&S.afterReBuild.call(d)}}function he(){return kn(T,Bt)}function ve(e){var t=he();e?t||(Z(!1,"internal"),ne(!1,"internal"),Nn(Sn(on)),Pn(T,Bt),Vn(S.afterResponsive)&&S.afterResponsive.call(d,e),S.scrollOverflow&&g.createScrollBarForAll()):t&&(Z(z.autoScrolling,"internal"),ne(z.autoScrolling,"internal"),Mn(Sn(on)),qn(T,Bt),Vn(S.afterResponsive)&&S.afterResponsive.call(d,e))}function ge(e){var t=e.target;t&&Bn(t,on+" a")?function(e){Yn(e);var t=Dn(Bn(this,on+" li"));Pe(Sn(Qt)[t])}.call(t,e):Kn(t,".fp-tooltip")?function(){Gn(On(this),"click")}.call(t):Kn(t,mn)?function(){var e=Bn(this,Qt);kn(this,yn)?v.m.left&&pe(e):v.m.right&&de(e)}.call(t,e):Kn(t,gn)||null!=Bn(t,gn)?function(e){Yn(e);var t=Sn(un,Bn(this,Qt))[0],n=Sn(an,t)[Dn(Bn(this,"li"))];at(t,n)}.call(t,e):Bn(t,S.menu+" [data-menuanchor]")&&function(e){!Sn(S.menu)[0]||!S.lockAnchors&&S.anchors.length||(Yn(e),ue(this.getAttribute("data-menuanchor")))}.call(t,e)}function me(e,t){zt["fp_"+e]=t,zt.addEventListener(e,ye,!0)}function ye(e){var t=e.type,i=!1,o=S.scrollOverflow,r="mouseleave"===t?e.toElement||e.relatedTarget:e.target;if(r==zt||!r)return re(!0),void(o&&S.scrollOverflowHandler.setIscroll(r,!0));"touchend"===t&&(W=!1,setTimeout(function(){W=!0},800)),"mouseenter"===t&&!W||(S.normalScrollElements.split(",").forEach(function(e){if(!i){var t=Kn(r,e),n=Bn(r,e);(t||n)&&(h.shared.isNormalScrollElement||(re(!1),o&&S.scrollOverflowHandler.setIscroll(r,!1)),h.shared.isNormalScrollElement=!0,i=!0)}}),!i&&h.shared.isNormalScrollElement&&(re(!0),o&&S.scrollOverflowHandler.setIscroll(r,!0),h.shared.isNormalScrollElement=!1))}function we(){var e=Cn(),t=En();C===e&&p===t||(C=e,p=t,fe(!0))}function be(e,t,n){var i=100*n,o=100/n,r=zt.createElement("div");r.className=cn,zn(t,r);var s=zt.createElement("div");s.className=dn,zn(t,s),An(Sn(pn,e),{width:i+"%"}),1<n&&(S.controlArrows&&function(e){var t=[Jn('<div class="fp-controlArrow fp-prev"></div>'),Jn('<div class="fp-controlArrow fp-next"></div>')];Fn(Sn(un,e)[0],t),"#fff"!==S.controlArrowColor&&(An(Sn(bn,e),{"border-color":"transparent transparent transparent "+S.controlArrowColor}),An(Sn(wn,e),{"border-color":"transparent "+S.controlArrowColor+" transparent transparent"}));S.loopHorizontal||Nn(Sn(wn,e))}(e),S.slidesNavigation&&function(e,t){In(Jn('<div class="'+hn+'"><ul></ul></div>'),e);var n=Sn(vn,e)[0];Pn(n,"fp-"+S.slidesNavPosition);for(var i=0;i<t;i++){var o=Sn(an,e)[i];In(Jn('<li><a href="#"><span class="fp-sr-only">'+Te(i,"Slide",o)+"</span><span></span></a></li>"),Sn("ul",n)[0])}An(n,{"margin-left":"-"+n.innerWidth/2+"px"}),Pn(Sn("a",Sn("li",n)[0]),Yt)}(e,n)),t.forEach(function(e){An(e,{width:o+"%"}),S.verticalCentered&&gt(e)});var a=Sn(ln,e)[0];null!=a&&(0!==Dn(Sn(Jt),Qt)||0===Dn(Sn(Jt),Qt)&&0!==Dn(a))?At(a,"internal"):Pn(t[0],Yt)}function xe(e,t){t||null!=Sn(Jt)[0]||Pn(e,Yt),i=Sn(Jt)[0],An(e,{height:C+"px"}),S.paddingTop&&An(e,{"padding-top":S.paddingTop}),S.paddingBottom&&An(e,{"padding-bottom":S.paddingBottom}),void 0!==S.sectionsColor[t]&&An(e,{"background-color":S.sectionsColor[t]}),void 0!==S.anchors[t]&&e.setAttribute("data-anchor",S.anchors[t])}function Se(e,t){void 0!==S.anchors[t]&&kn(e,Yt)&&ht(S.anchors[t],t),S.menu&&S.css3&&null!=Bn(Sn(S.menu)[0],Wt)&&Sn(S.menu).forEach(function(e){T.appendChild(e)})}function Te(e,t,n){var i="Section"===t?S.anchors[e]:n.getAttribute("data-anchor");return S.navigationTooltips[e]||i||t+" "+(e+1)}function ke(){var e,t,n=Sn(Jt)[0];Pn(n,Gt),Ue(n),Fe(),_e(n),S.scrollOverflow&&S.scrollOverflowHandler.afterLoad(),e=Je(),t=wt(e.section),e.section&&t&&(void 0===t||Dn(t)!==Dn(i))||!Vn(S.afterLoad)||qe("afterLoad",{activeSection:n,element:n,direction:null,anchorLink:n.getAttribute("data-anchor"),sectionIndex:Dn(n,Qt)}),Vn(S.afterRender)&&qe("afterRender")}function Ce(){var e,t,n,i,o,r;if(!E&&(!S.autoScrolling||S.scrollBar)){var s=Xn(),a=(r=U<(o=s)?"down":"up",K=U=o,r),l=0,c=s+Cn()/2,u=T.offsetHeight-Cn()===s,d=Sn(Qt);if(u)l=d.length-1;else if(s)for(var p=0;p<d.length;++p){d[p].offsetTop<=c&&(l=p)}else l=0;if(t=a,n=Sn(Jt)[0].offsetTop,i=n+Cn(),("up"!=t?n<=Xn():i>=Xn()+Cn())&&(kn(Sn(Jt)[0],Gt)||(Pn(Sn(Jt)[0],Gt),qn(_n(Sn(Jt)[0]),Gt))),!kn(e=d[l],Yt)){F=!0;var f,h,v=Sn(Jt)[0],g=Dn(v,Qt)+1,m=vt(e),y=e.getAttribute("data-anchor"),w=Dn(e,Qt)+1,b=Sn(ln,e)[0],x={activeSection:v,sectionIndex:w-1,anchorLink:y,element:e,leavingSection:g,direction:m};b&&(h=b.getAttribute("data-anchor"),f=Dn(b)),A&&(Pn(e,Yt),qn(_n(e),Yt),Vn(S.onLeave)&&qe("onLeave",x),Vn(S.afterLoad)&&qe("afterLoad",x),Ve(v),Ue(e),_e(e),ht(y,w-1),S.anchors.length&&(k=y),St(f,h,y)),clearTimeout($),$=setTimeout(function(){F=!1},100)}S.fitToSection&&(clearTimeout(L),L=setTimeout(function(){S.fitToSection&&Sn(Jt)[0].offsetHeight<=C&&Ee()},S.fitToSectionDelay))}}function Ee(){A&&(E=!0,Pe(Sn(Jt)[0]),E=!1)}function Ae(e){if(v.m[e]){var t="down"===e?le:ae;if(S.scrollOverflow){var n=S.scrollOverflowHandler.scrollable(Sn(Jt)[0]),i="down"===e?"bottom":"top";if(null!=n){if(!S.scrollOverflowHandler.isScrolled(i,n))return 1;t()}else t()}else t()}}function $e(e){S.autoScrolling&&Oe(e)&&v.m.up&&Yn(e)}function Le(e){var t=Bn(e.target,Qt)||Sn(Jt)[0];if(Oe(e)){S.autoScrolling&&Yn(e);var n=Et(e);Y=n.y,V=n.x,Sn(un,t).length&&Math.abs(_-V)>Math.abs(X-Y)?!a&&Math.abs(_-V)>En()/100*S.touchSensitivity&&(V<_?v.m.right&&de(t):v.m.left&&pe(t)):S.autoScrolling&&A&&Math.abs(X-Y)>It.innerHeight/100*S.touchSensitivity&&(Y<X?Ae("down"):X<Y&&Ae("up"))}}function Oe(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function je(e){if(S.fitToSection&&(P=!1),Oe(e)){var t=Et(e);X=t.y,_=t.x}}function He(e,t){for(var n=0,i=e.slice(Math.max(e.length-t,1)),o=0;o<i.length;o++)n+=i[o];return Math.ceil(n/t)}function De(e){var t=(new Date).getTime(),n=kn(Sn(".fp-completely")[0],nn);if(!v.m.down&&!v.m.up)return Yn(e),!1;if(S.autoScrolling&&!c&&!n){var i=(e=e||It.event).wheelDelta||-e.deltaY||-e.detail,o=Math.max(-1,Math.min(1,i)),r=void 0!==e.wheelDeltaX||void 0!==e.deltaX,s=Math.abs(e.wheelDeltaX)<Math.abs(e.wheelDelta)||Math.abs(e.deltaX)<Math.abs(e.deltaY)||!r;149<f.length&&f.shift(),f.push(Math.abs(i)),S.scrollBar&&Yn(e);var a=t-G;if(G=t,200<a&&(f=[]),A){var l=He(f,10);He(f,70)<=l&&s&&Ae(o<0?"down":"up")}return!1}S.fitToSection&&(P=!1)}function Ne(e,t){var n=null==t?Sn(Jt)[0]:t,i=Sn(un,n)[0];if(!(null==i||a||Sn(an,i).length<2)){var o=Sn(ln,i)[0],r=null;if(null==(r=("left"===e?$n:Ln)(o,an))){if(!S.loopHorizontal)return;var s=_n(o);r="left"===e?s[s.length-1]:s[0]}a=!h.test.isTesting,at(i,r,e)}}function Me(){for(var e=Sn(ln),t=0;t<e.length;t++)At(e[t],"internal")}function Pe(e,t,n){if(null!=e){var i,o,r,s,a,l,c,u,d,p={element:e,callback:t,isMovementUp:n,dtop:(o=(i=e).offsetHeight,r=i.offsetTop,a=K<(s=r),l=s-C+o,c=S.bigSectionsDestination,C<o?(a||c)&&"bottom"!==c||(s=l):(a||E&&null==jn(i))&&(s=l),K=s),yMovement:vt(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:Dn(e,Qt),activeSlide:Sn(ln,e)[0],activeSection:Sn(Jt)[0],leavingSection:Dn(Sn(Jt),Qt)+1,localIsResizing:E};if(!(p.activeSection==e&&!E||S.scrollBar&&Xn()===p.dtop&&!kn(e,tn))){if(null!=p.activeSlide&&(u=p.activeSlide.getAttribute("data-anchor"),d=Dn(p.activeSlide)),!p.localIsResizing){var f=p.yMovement;if(void 0!==n&&(f=n?"up":"down"),p.direction=f,Vn(S.onLeave)&&!1===qe("onLeave",p))return}S.autoScrolling&&S.continuousVertical&&void 0!==p.isMovementUp&&(!p.isMovementUp&&"up"==p.yMovement||p.isMovementUp&&"down"==p.yMovement)&&(p=function(e){e.isMovementUp?Un(Sn(Jt)[0],ei(e.activeSection,Qt)):Fn(Sn(Jt)[0],ti(e.activeSection,Qt).reverse());return $t(Sn(Jt)[0].offsetTop),Me(),e.wrapAroundElements=e.activeSection,e.dtop=e.element.offsetTop,e.yMovement=vt(e.element),e}(p)),p.localIsResizing||Ve(p.activeSection),S.scrollOverflow&&S.scrollOverflowHandler.beforeLeave(),Pn(e,Yt),qn(_n(e),Yt),Ue(e),S.scrollOverflow&&S.scrollOverflowHandler.onLeave(),A=h.test.isTesting,St(d,u,p.anchorLink,p.sectionIndex),function(e){var t=S.scrollingSpeed<700,n=t?700:S.scrollingSpeed;if(S.css3&&S.autoScrolling&&!S.scrollBar){yt("translate3d(0px, -"+Math.round(e.dtop)+"px, 0px)",!0),S.scrollingSpeed?(clearTimeout(w),w=setTimeout(function(){We(e),A=!t},S.scrollingSpeed)):We(e)}else{var i=Re(e.dtop);h.test.top=-e.dtop+"px",Dt(i.element,i.options,S.scrollingSpeed,function(){S.scrollBar?setTimeout(function(){We(e)},30):(We(e),A=!t)})}t&&(clearTimeout(I),I=setTimeout(function(){A=!0},n))}(p),k=p.anchorLink,ht(p.anchorLink,p.sectionIndex)}}}function qe(e,t){var n,i=function(e,t){var n;n=S.v2compatible?{afterRender:function(){return[d]},onLeave:function(){return[t.activeSection,t.leavingSection,t.sectionIndex+1,t.direction]},afterLoad:function(){return[t.element,t.anchorLink,t.sectionIndex+1]},afterSlideLoad:function(){return[t.destiny,t.anchorLink,t.sectionIndex+1,t.slideAnchor,t.slideIndex]},onSlideLeave:function(){return[t.prevSlide,t.anchorLink,t.sectionIndex+1,t.prevSlideIndex,t.direction,t.slideIndex]}}:{afterRender:function(){return{section:Ie(Sn(Jt)[0]),slide:ze(Sn(ln,Sn(Jt)[0])[0])}},onLeave:function(){return{origin:Ie(t.activeSection),destination:Ie(t.element),direction:t.direction}},afterLoad:function(){return n.onLeave()},afterSlideLoad:function(){return{section:Ie(t.section),origin:ze(t.prevSlide),destination:ze(t.destiny),direction:t.direction}},onSlideLeave:function(){return n.afterSlideLoad()}};return n[e]()}(e,t);if(S.v2compatible){if(!1===S[e].apply(i[0],i.slice(1)))return!1}else if(Gn(d,e,i),!1===S[e].apply(i[Object.keys(i)[0]],(n=i,Object.keys(n).map(function(e){return n[e]}))))return!1;return!0}function Ie(e){return e?new Pt(e):null}function ze(e){return e?new qt(e):null}function Re(e){var t={};return S.autoScrolling&&!S.scrollBar?(t.options=-e,t.element=Sn(Wt)[0]):(t.options=e,t.element=It),t}function We(e){var t;null!=(t=e).wrapAroundElements&&(t.isMovementUp?Un(Sn(Qt)[0],t.wrapAroundElements):Fn(Sn(Qt)[Sn(Qt).length-1],t.wrapAroundElements),$t(Sn(Jt)[0].offsetTop),Me()),Vn(S.afterLoad)&&!e.localIsResizing&&qe("afterLoad",e),S.scrollOverflow&&S.scrollOverflowHandler.afterLoad(),e.localIsResizing||_e(e.element),Pn(e.element,Gt),qn(_n(e.element),Gt),Fe(),A=!0,Vn(e.callback)&&e.callback()}function Be(e,t){e.setAttribute(t,e.getAttribute("data-"+t)),e.removeAttribute("data-"+t)}function Fe(){var e=Sn(".fp-auto-height")[0]||he()&&Sn(".fp-auto-height-responsive")[0];S.lazyLoading&&e&&Sn(Qt+":not("+Vt+")").forEach(function(e){var t,n,i;t=e.getBoundingClientRect(),n=t.top,i=t.bottom,(n+2<C&&0<n||2<i&&i<C)&&Ue(e)})}function Ue(i){S.lazyLoading&&Sn("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",Ge(i)).forEach(function(n){if(["src","srcset"].forEach(function(e){var t=n.getAttribute("data-"+e);null!=t&&t&&(Be(n,e),n.addEventListener("load",function(){Xe(i)}))}),Kn(n,"source")){var e=Bn(n,"video, audio");e&&(e.load(),e.onloadeddata=function(){Xe(i)})}})}function Xe(e){S.scrollOverflow&&(clearTimeout(q),q=setTimeout(function(){kn(T,Bt)||g.createScrollBar(e)},200))}function _e(e){var t=Ge(e);Sn("video, audio",t).forEach(function(e){e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()}),Sn('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){e.hasAttribute("data-autoplay")&&Ye(e),e.onload=function(){e.hasAttribute("data-autoplay")&&Ye(e)}})}function Ye(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function Ve(e){var t=Ge(e);Sn("video, audio",t).forEach(function(e){e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()}),Sn('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){/youtube\.com\/embed\//.test(e.getAttribute("src"))&&!e.hasAttribute("data-keepplaying")&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function Ge(e){var t=Sn(ln,e);return t.length&&(e=t[0]),e}function Ke(){var e=Je(),t=e.section,n=e.slide;t&&(S.animateAnchor?bt:ce)(t,n)}function Qe(){if(!F&&!S.lockAnchors){var e=Je(),t=e.section,n=e.slide,i=void 0===k,o=void 0===k&&void 0===n&&!a;t&&t.length&&(t&&t!==k&&!i||o||!a&&r!=n)&&bt(t,n)}}function Je(){var e,t,n=It.location.hash;if(n.length){var i=n.replace("#","").split("/"),o=-1<n.indexOf("#/");e=o?"/"+i[1]:decodeURIComponent(i[0]);var r=o?i[2]:i[1];r&&r.length&&(t=decodeURIComponent(r))}return{section:e,slide:t}}function Ze(e){clearTimeout(x);var t=zt.activeElement,n=e.keyCode;if(9===n)!function(e){var t=e.shiftKey,n=zt.activeElement,i=it(Ge(Sn(Jt)[0]));function o(e){return Yn(e),i[0]?i[0].focus():null}if(function(e){var t=it(zt),n=t.indexOf(zt.activeElement),i=e.shiftKey?n-1:n+1,o=t[i],r=ze(Bn(o,an)),s=Ie(Bn(o,Qt));return!r&&!s}(e))return;n?null==Bn(n,Jt+","+Jt+" "+ln)&&(n=o(e)):o(e);(!t&&n==i[i.length-1]||t&&n==i[0])&&Yn(e)}(e);else if(!Kn(t,"textarea")&&!Kn(t,"input")&&!Kn(t,"select")&&"true"!==t.getAttribute("contentEditable")&&""!==t.getAttribute("contentEditable")&&S.keyboardScrolling&&S.autoScrolling){-1<[40,38,32,33,34].indexOf(n)&&Yn(e),c=e.ctrlKey,x=setTimeout(function(){!function(e){var t=e.shiftKey,n=zt.activeElement,i=Kn(n,"video")||Kn(n,"audio");if(!A&&[37,39].indexOf(e.keyCode)<0)return;switch(e.keyCode){case 38:case 33:v.k.up&&ae();break;case 32:if(t&&v.k.up&&!i){ae();break}case 40:case 34:v.k.down&&(32===e.keyCode&&i||le());break;case 36:v.k.up&&ue(1);break;case 35:v.k.down&&ue(Sn(Qt).length);break;case 37:v.k.left&&pe();break;case 39:v.k.right&&de();break;default:;}}(e)},150)}}function et(e){t&&(c=e.ctrlKey)}function tt(e){2==e.which&&(Q=e.pageY,d.addEventListener("mousemove",st))}function nt(e){2==e.which&&d.removeEventListener("mousemove",st)}function it(e){return[].slice.call(Sn(D,e)).filter(function(e){return"-1"!==e.getAttribute("tabindex")&&null!==e.offsetParent})}function ot(){t=!0}function rt(){c=t=!1}function st(e){S.autoScrolling&&(A&&(e.pageY<Q&&v.m.up?ae():e.pageY>Q&&v.m.down&&le()),Q=e.pageY)}function at(e,t,n){var i=Bn(e,Qt),o={slides:e,destiny:t,direction:n,destinyPos:{left:t.offsetLeft},slideIndex:Dn(t),section:i,sectionIndex:Dn(i,Qt),anchorLink:i.getAttribute("data-anchor"),slidesNav:Sn(vn,i)[0],slideAnchor:kt(t),prevSlide:Sn(ln,i)[0],prevSlideIndex:Dn(Sn(ln,i)[0]),localIsResizing:E};o.xMovement=function(e,t){if(e==t)return"none";if(t<e)return"left";return"right"}(o.prevSlideIndex,o.slideIndex),o.direction=o.direction?o.direction:o.xMovement,o.localIsResizing||(A=!1),S.onSlideLeave&&!o.localIsResizing&&"none"!==o.xMovement&&Vn(S.onSlideLeave)&&!1===qe("onSlideLeave",o)?a=!1:(Pn(t,Yt),qn(_n(t),Yt),o.localIsResizing||(Ve(o.prevSlide),Ue(t)),!S.loopHorizontal&&S.controlArrows&&(Qn(Sn(wn,i),0!==o.slideIndex),Qn(Sn(bn,i),null!=jn(t))),kn(i,Yt)&&!o.localIsResizing&&St(o.slideIndex,o.slideAnchor,o.anchorLink,o.sectionIndex),function(e,t,n){var i=t.destinyPos;if(S.css3){var o="translate3d(-"+Math.round(i.left)+"px, 0px, 0px)";h.test.translate3dH[t.sectionIndex]=o,An(pt(Sn(pn,e)),Lt(o)),b=setTimeout(function(){n&&lt(t)},S.scrollingSpeed)}else h.test.left[t.sectionIndex]=Math.round(i.left),Dt(e,Math.round(i.left),S.scrollingSpeed,function(){n&&lt(t)})}(e,o,!0))}function lt(e){var t,n;t=e.slidesNav,n=e.slideIndex,S.slidesNavigation&&null!=t&&(qn(Sn(Vt,t),Yt),Pn(Sn("a",Sn("li",t)[n]),Yt)),e.localIsResizing||(Vn(S.afterSlideLoad)&&qe("afterSlideLoad",e),A=!0,_e(e.destiny)),a=!1}function ct(){E=!0,clearTimeout(m),m=setTimeout(function(){for(var e=0;e<4;e++)y=setTimeout(ut,200*e)},200)}function ut(){if(dt(),l){var e=zt.activeElement;if(!Kn(e,"textarea")&&!Kn(e,"input")&&!Kn(e,"select")){var t=Cn();Math.abs(t-J)>20*Math.max(J,t)/100&&(fe(!0),J=t)}}else we()}function dt(){var e=S.responsive||S.responsiveWidth,t=S.responsiveHeight,n=e&&It.innerWidth<e,i=t&&It.innerHeight<t;e&&t?ve(n||i):e?ve(n):t&&ve(i)}function pt(e){var t="all "+S.scrollingSpeed+"ms "+S.easingcss3;return qn(e,Ft),An(e,{"-webkit-transition":t,transition:t})}function ft(e){return Pn(e,Ft)}function ht(e,t){var n,i,o;n=e,Sn(S.menu).forEach(function(e){S.menu&&null!=e&&(qn(Sn(Vt,e),Yt),Pn(Sn('[data-menuanchor="'+n+'"]',e),Yt))}),i=e,o=t,S.navigation&&null!=Sn(on)[0]&&(qn(Sn(Vt,Sn(on)[0]),Yt),Pn(i?Sn('a[href="#'+i+'"]',Sn(on)[0]):Sn("a",Sn("li",Sn(on)[0])[o]),Yt))}function vt(e){var t=Dn(Sn(Jt)[0],Qt),n=Dn(e,Qt);return t==n?"none":n<t?"up":"down"}function gt(e){if(!kn(e,fn)){var t=zt.createElement("div");t.className=Zt,t.style.height=mt(e)+"px",Pn(e,fn),Rn(e,t)}}function mt(e){var t=C;if(S.paddingTop||S.paddingBottom){var n=e;kn(n,Kt)||(n=Bn(e,Qt));var i=parseInt(getComputedStyle(n)["padding-top"])+parseInt(getComputedStyle(n)["padding-bottom"]);t=C-i}return t}function yt(e,t){(t?pt:ft)(d),An(d,Lt(e)),h.test.translate3d=e,setTimeout(function(){qn(d,Ft)},10)}function wt(e){var t=Sn(Qt+'[data-anchor="'+e+'"]',d)[0];if(!t){var n=void 0!==e?e-1:0;t=Sn(Qt)[n]}return t}function bt(e,t){var n=wt(e);if(null!=n){var i,o,r,s=(null==(r=Sn(an+'[data-anchor="'+(i=t)+'"]',o=n)[0])&&(i=void 0!==i?i:0,r=Sn(an,o)[i]),r);kt(n)===k||kn(n,Yt)?xt(s):Pe(n,function(){xt(s)})}}function xt(e){null!=e&&at(Bn(e,un),e)}function St(e,t,n){var i="";S.anchors.length&&!S.lockAnchors&&(e?(null!=n&&(i=n),null==t&&(t=e),Tt(i+"/"+(r=t))):(null!=e&&(r=t),Tt(n))),Ct()}function Tt(e){if(S.recordHistory)location.hash=e;else if(l||u)It.history.replaceState(void 0,void 0,"#"+e);else{var t=It.location.href.split("#")[0];It.location.replace(t+"#"+e)}}function kt(e){if(!e)return null;var t=e.getAttribute("data-anchor"),n=Dn(e);return null==t&&(t=n),t}function Ct(){var e=Sn(Jt)[0],t=Sn(ln,e)[0],n=kt(e),i=kt(t),o=String(n);t&&(o=o+"-"+i),o=o.replace("/","-").replace("#","");var r=new RegExp("\\b\\s?"+_t+"-[^\\s]+\\b","g");T.className=T.className.replace(r,""),Pn(T,_t+"-"+o)}function Et(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,u&&Oe(e)&&S.scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function At(e,t){te(0,"internal"),void 0!==t&&(E=!0),at(Bn(e,un),e),void 0!==t&&(E=!1),te(z.scrollingSpeed,"internal")}function $t(e){var t=Math.round(e);if(S.css3&&S.autoScrolling&&!S.scrollBar)yt("translate3d(0px, -"+t+"px, 0px)",!1);else if(S.autoScrolling&&!S.scrollBar)An(d,{top:-t+"px"}),h.test.top=-t+"px";else{var n=Re(t);Nt(n.element,n.options)}}function Lt(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function Ot(t,e,n){"all"!==e?v[n][e]=t:Object.keys(v[n]).forEach(function(e){v[n][e]=t})}function jt(e,t,n){S[e]=t,"internal"!==n&&(z[e]=t)}function Ht(){var e=S.licenseKey,t="font-size: 15px;background:yellow;";n?e&&e.length<20&&(console.warn("%c This website was made using fullPage.js slider. More info on the following website:",t),console.warn("%c https://alvarotrigo.com/fullPage/",t)):(xn("error","Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:"),xn("error","https://github.com/alvarotrigo/fullPage.js#options.")),kn(s,Xt)?xn("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(S.continuousVertical&&(S.loopTop||S.loopBottom)&&(S.continuousVertical=!1,xn("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),!S.scrollOverflow||!S.scrollBar&&S.autoScrolling||xn("warn","Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox"),!S.continuousVertical||!S.scrollBar&&S.autoScrolling||(S.continuousVertical=!1,xn("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),S.scrollOverflow&&null==S.scrollOverflowHandler&&(S.scrollOverflow=!1,xn("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),B.forEach(function(e){S[e]&&xn("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+e)}),S.anchors.forEach(function(t){var e=[].slice.call(Sn("[name]")).filter(function(e){return e.getAttribute("name")&&e.getAttribute("name").toLowerCase()==t.toLowerCase()}),n=[].slice.call(Sn("[id]")).filter(function(e){return e.getAttribute("id")&&e.getAttribute("id").toLowerCase()==t.toLowerCase()});if(n.length||e.length){xn("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).");var i=n.length?"id":"name";(n.length||e.length)&&xn("error",'"'+t+'" is is being used by another element `'+i+"` property")}}))}function Dt(t,n,i,o){var e,r=(e=t).self!=It&&kn(e,cn)?e.scrollLeft:!S.autoScrolling||S.scrollBar?Xn():e.offsetTop,s=n-r,a=0;P=!0;var l=function(){if(P){var e=n;a+=20,i&&(e=It.fp_easings[S.easing](a,r,s,i)),Nt(t,e),a<i?setTimeout(l,20):void 0!==o&&o()}else a<i&&o()};l()}function Nt(e,t){!S.autoScrolling||S.scrollBar||e.self!=It&&kn(e,cn)?e.self!=It&&kn(e,cn)?e.scrollLeft=t:e.scrollTo(0,t):e.style.top=t+"px"}function Mt(e,t){this.anchor=e.getAttribute("data-anchor"),this.item=e,this.index=Dn(e,t),this.isLast=this.index===e.parentElement.querySelectorAll(t).length-1,this.isFirst=!this.index}function Pt(e){Mt.call(this,e,Qt)}function qt(e){Mt.call(this,e,an)}Ht()}}),window.jQuery&&window.fullpage&&function(t,n){"use strict";t&&n?t.fn.fullpage=function(e){e=t.extend({},e,{$:t});new n(this[0],e)}:window.fp_utils.showError("error","jQuery is required to use the jQuery fullpage adapter!")}(window.jQuery,window.fullpage);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
